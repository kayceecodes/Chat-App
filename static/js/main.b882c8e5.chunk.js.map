{"version":3,"sources":["components/messages/messageform/MessageForm.module.scss","components/messages/Messages.module.scss","components/auth/login/Login.module.scss","components/auth/register/Register.module.scss","serviceWorker.ts","components/colorpanel/ColorPanel.tsx","ComponentType.tsx","firebase.tsx","components/sidepanel/userpanel/UserPanel.tsx","store/actions/setCurrentChannel.tsx","store/actions/actionTypes.tsx","store/actions/setPrivateChannel.tsx","components/sidepanel/channels/Channels.tsx","components/sidepanel/directmessages/DirectMessages.tsx","components/sidepanel/starred/Starred.tsx","components/sidepanel/SidePanel.tsx","components/metapanel/MetaPanel.tsx","components/messages/progressbar/ProgressBar.tsx","components/messages/messageform/filemodal/FileModal.tsx","components/messages/messageform/MessageForm.tsx","components/messages/messagesheader/MessagesHeader.tsx","components/messages/message/Message.tsx","components/messages/Messages.tsx","components/App.tsx","components/auth/login/Login.tsx","components/auth/register/Register.tsx","components/ui/spinner/Spinner.tsx","store/reducers/user_reducer.tsx","store/reducers/channel_reducer.tsx","store/reducers/index.tsx","index.tsx","store/actions/setUser.tsx"],"names":["module","exports","messageForm","messages","comment","register","Boolean","window","location","hostname","match","ColorPanel","react_default","a","createElement","Sidebar","as","Menu","inverted","vertical","visible","width","Divider","Button","icon","size","color","React","Component","ComponentType","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","UserPanel","state","user","_this","props","currentUser","dropdownOptions","key","text","displayName","disabled","onClick","handleSignout","auth","signOut","then","console","log","this","setState","Grid","style","background","Column","Row","padding","margin","Header","floated","Icon","name","Content","Dropdown","trigger","Image","space","avatar","src","photoURL","options","connect","setCurrentChannel","channel","type","payload","currentChannel","setPrivateChannel","isPrivateChannel","Channels","id","channels","channelName","channelDetails","channelsRef","database","ref","messagesRef","notifications","total","lastKnownTotal","count","isModalOpen","firstLoad","activeChannel","removeListeners","off","setFirstChannel","firstChannel","length","setActiveChannel","changeChannel","clearNotifications","index","findIndex","notification","updatedNotifications","Object","toConsumableArray","addNotificationListener","channelId","child","on","snap","handleNotifications","currentChannelId","lastTotal","numChildren","push","getNotificationCount","forEach","displayChannels","map","Item","opacity","active","Label","addChannel","_this$state","newChannel","details","createdBy","update","closeModal","catch","error","handleSubmit","event","preventDefault","isFormValid","openModal","handleChange","defineProperty","currentTarget","value","_ref","addListenters","_this2","loadedChannels","val","_this$state2","Fragment","className","Modal","basic","open","onClose","Form","onSubmit","Field","Input","fluid","label","onChange","Actions","DirectMessages","users","usersRef","connectedRef","presenceRef","addListeners","currentUserUid","loadedUsers","set","onDisconnect","remove","err","addStatusToUser","userId","connected","arguments","undefined","updatedUsers","reduce","acc","uid","concat","isUserOnline","status","channelData","getChannelId","currentUserId","fontStyle","_useState","useState","_useState2","slicedToArray","starredChannels","_useState3","_useState4","setActive","_useState5","_useState6","SidePanel","fixed","fontSize","sidepanel_userpanel_UserPanel","starred_Starred","channels_Channels","directmessages_DirectMessages","MetaPanel","ProgressBar","uploadState","percentUploaded","Progress","styles","progressBar","percent","progress","indicating","FileModal","file","authorized","addFile","files","sendFile","_this$props","uploadFile","isAuthorized","contentType","mime","lookup","clearFile","filename","includes","_this$props2","modal","MessageForm","storageRef","storage","uploadTask","message","loading","errors","createMessage","fileUrl","timestamp","ServerValue","TIMESTAMP","image","content","sendMessage","getMessagesRef","getPath","metadata","pathToUpload","filePath","uuidv4","put","Math","round","bytesTransferred","totalBytes","snapshot","getDownloadURL","downloadUrl","sendFileMessage","Segment","marginBottom","labelPosition","placeholder","some","Group","widths","filemodal_FileModal","progressbar_ProgressBar","MessagesHeader","numUniqueUsers","handleSearchChange","searchLoading","isChannelStarred","handleStar","clearing","Subheader","isOwnMessage","Message","Comment","Avatar","Author","Metadata","moment","fromNow","isImage","Text","Messages","privateChannel","privateMessagesRef","messagesLoading","searchTerm","searchResults","addMessageListener","loadedMessages","countUniqueUsers","prevState","starChannel","handleSearchMessages","channelMessages","regex","RegExp","setTimeout","uniqueUsers","plural","displayMessages","message_Message","displayChannelName","_this$state3","messagesheader_MessagesHeader","maxWidth","messageform_MessageForm","columns","colorpanel_ColorPanel","sidepanel_SidePanel","marginLeft","messages_Messages","metapanel_MetaPanel","Login","email","password","displayErrors","i","signInWithEmailAndPassword","signedInUser","credentials","handleInputError","inputName","toLowerCase","textAlign","verticalAlign","data-test","stacked","iconPosition","collections_Message_Message","react_router_dom","to","Register","_ComponentType","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","username","passwordConfirmation","createUserWithEmailAndPassword","createdUser","updateProfile","md5","saveUser","isFormEmpty","isPasswordValid","form","inherits","createClass","Spinner","Dimmer","Loader","initialUserState","isLoading","user_reducer","action","objectSpread","initialChannelState","channel_reducer","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunk","store","createStore","applyMiddleware","Root","onAuthStateChanged","setUser","history","clearUser","spinner_Spinner","react_router","exact","path","component","App","RootWithAuth","withRouter","document","getElementById","ReactDOM","render","es","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b882c8e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageForm\":\"MessageForm_messageForm__2LtRa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__2jnq-\",\"comment\":\"Messages_comment__99uDs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Login_register__3p-R9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__1YeEj\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Sidebar, Menu, Divider, Button } from 'semantic-ui-react';\n\nclass ColorPanel extends React.Component {\n    render() {\n        return (\n            <Sidebar\n              as={Menu}\n              // icon='label'\n              inverted\n              vertical\n              visible\n              width='very thin'\n            >\n              <Divider />\n            \n              <Button icon='add' size='small' color='blue' />\n            </Sidebar>\n        )\n    }\n}\nexport default ColorPanel;","import React from 'react';\n\n\nexport type FormEvent = React.FormEvent<HTMLFormElement>;\nexport type InputEvent = React.FormEvent<HTMLInputElement>;\n\n\n\nexport default class ComponentType<P = any, S = any> extends React.Component<P, S> {    \n\n}\n\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';  \nimport 'firebase/storage';\n\nvar config = {\n    apiKey: \"AIzaSyAuyuNcunURGGkny2xJ0VDcXOc5k2kohcg\",\n    authDomain: \"slack-app-d47b6.firebaseapp.com\",\n    databaseURL: \"https://slack-app-d47b6.firebaseio.com\",\n    projectId: \"slack-app-d47b6\",\n    storageBucket: \"slack-app-d47b6.appspot.com\",\n    messagingSenderId: \"539859022252\"\n  };\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n\n// == SERVICE STORAGE ==\n\n// service firebase.storage {\n//   match /b/{bucket}/o {\n//     match /{allPaths=**} {\n//       allow read, write: if request.auth != null;\n//     }\n//   }\n// }","import React from \"react\";\nimport { Grid, Header, Icon, Dropdown, Image } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../firebase\";\n// import styles from \"./UserPanel.module.scss\";\nimport \"./UserPanel.scss\";\n\nexport interface Store extends React.Props<any> {\n  store?: any;\n}\n\ninterface Props {\n  currentUser: {\n    displayName: string;\n    photoURL: string;\n  };\n}\n\nclass UserPanel extends React.Component<Props> {\n  state = {\n    user: this.props.currentUser\n  };\n  componentDidMount() {\n    this.setState({ user: this.props.currentUser });\n\n  }\n\n  dropdownOptions = () => [\n    {\n      key: \"user\",\n      text: (\n        <span>\n          {\" \"}\n          Signed in as<strong>{this.props.currentUser.displayName}</strong>\n        </span>\n      ),\n      disabled: true\n    },\n    {\n      key: \"avatar\",\n      text: <span>Change Avatar</span>\n    },\n    {\n      key: \"signout\",\n      text: <span onClick={this.handleSignout}>Sign Out</span>\n    }\n  ];\n\n  handleSignout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => console.log(\"signed out!\"));\n  };\n  render() {\n    console.log(this.props.currentUser);\n    const { user } = this.state;\n    return (\n      <Grid style={{ background: \"#4c3c4c\" }}>\n        <Grid.Column>\n          <Grid.Column>\n            <Grid.Row style={{ padding: \"1.2em\", margin: 0 }}>\n              {/* App Header */}\n              <Header inverted floated=\"left\" as=\"h2\">\n                <Icon name=\"code\" />\n                <Header.Content>DevChat</Header.Content>\n              </Header>\n              \n              {/* User Dropdown */}\n              <Header style={{ padding: \"0.25em\" }} as=\"h4\" inverted />\n              <Dropdown\n                trigger={\n                  <span style={{ color: \"white\" }}>\n                  <br />\n                    <Image space=\"right\" avatar src={user.photoURL}   />\n                    {this.state.user.displayName}\n                  </span>\n                }\n                options={this.dropdownOptions()}\n              />\n            </Grid.Row>\n          </Grid.Column>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any): any => ({\n  currentUser: state.user.currentUser\n});\n\nexport default connect(mapStateToProps)(UserPanel);\n\n// === LEFT OFF 3:34 ======\n","import * as actionTypes from './actionTypes';\n\n\nexport interface IChannel {\n    type:string,\n    payload:{currentChannel:{channel:object}}\n}\n\nexport const setCurrentChannel = (channel:any) => {\n    return {\n        type:actionTypes.SET_CURRENT_CHANNEL,\n        payload:{\n            currentChannel: channel\n        }\n    }\n}","export interface IActions {\n  type: string;\n}\n// USER TYPES\nexport const SET_USER = 'SET_USER';\n\nexport const CLEAR_USER = 'CLEAR_USER';\n\n// Channel TYPES\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\n// Private Channels CALLED in DirectMessages.tsx / changeChannel()\nexport const SET_PRIVATE_CHANNEL = 'SET_PRIVATE_CHANNEL';","import * as actionTypes from './actionTypes';\n\nexport const setPrivateChannel = (isPrivateChannel: boolean) => {\n    return {\n        type: actionTypes.SET_PRIVATE_CHANNEL,\n        payload: {\n            isPrivateChannel\n        }\n    }\n}","import React from 'react'; \nimport { Menu, Icon, Modal, Input, Button, Label, Form } from 'semantic-ui-react';\nimport firebase from '../../../firebase';\n\nimport {setCurrentChannel, setPrivateChannel} from '../../../store/actions';\nimport {connect} from 'react-redux';\n\n\ntype InputEvent = React.FormEvent<HTMLInputElement>;\ntype FormEvent = React.FormEvent<HTMLFormElement>;\ntype User = {displayName:string, photoURL:string};\ntype Notification = {\n  id: number,\n  total: number,\n  lastKnownTotal: number,\n  count: number,\n}\n\nexport interface Channel {id:number, name:string};\n\nexport interface INewChannel {\n    id: string,\n    name: string,\n    details: string,\n    createdBy: {\n        name: string,\n        avatar: string\n    }\n}\n\ninterface IState {\n        user:User,\n        channel:Channel,\n        channels: any,\n        channelName: string,\n        channelDetails: string,\n        isModalOpen: boolean,\n        channelsRef: any,\n        messagesRef: any,\n        notifications:[Notification],\n        firstLoad: boolean,\n        activeChannel: string\n}\n\ninterface IProps {\n    currentUser:User,\n    changeChannel?:(channel:object) => void,\n    setCurrentChannel?:any,\n    setActiveChannel?:() => void,\n    setPrivateChannel?:any,\n}\n\nclass Channels extends React.Component<IProps> {\n    state:IState = {\n        user: this.props.currentUser,\n        channel: {id:0, name: ''},\n        channels: [], // ?????????? ---- COULD CAUSE PROBLEMS IN CHANNEL SWITCHING //\n        channelName: '',\n        channelDetails: '',\n        channelsRef: firebase.database().ref('channels'),\n        messagesRef: firebase.database().ref('messages'),\n        notifications: [{id: 0, total: 0, lastKnownTotal: 0, count: 0}],\n        isModalOpen:false,\n        firstLoad: true,\n        activeChannel: '',\n    }\n    componentWillMount() {\n        this.addListenters();\n        console.log(\"CHANNELS -> State channels: \", this.state.channels);\n    }\n\n    componentWillUnmount() {\n        this.removeListeners();\n    }\n\n    addListenters() {\n        let loadedChannels:Array<object> = [];  \n        this.state.channelsRef.on('child_added', (snap:{val:()=>object, key:number}) =>{\n            loadedChannels.push( snap.val() );\n            this.setState({channels: loadedChannels}, () => this.setFirstChannel());\n            this.addNotificationListener(snap.key);\n        });\n    }\n\n    removeListeners = ():void => {\n        this.state.channelsRef.off();\n    }\n///////////////////////////\n    setFirstChannel = () => {\n        const firstChannel = this.state.channels[0];\n        if(this.state.firstLoad && this.state.channels.length > 0) {\n            this.props.setCurrentChannel(firstChannel);\n            this.setActiveChannel(firstChannel) ;\n        }\n        this.setState({firstLoad: false});\n    }\n//////////////////////////////\n    changeChannel = (channel:Channel) => {\n        this.props.setCurrentChannel(channel);\n        this.clearNotifications();\n        this.setActiveChannel(channel);\n        this.props.setPrivateChannel(false);\n        this.setState({ channel });\n    }\n\n    clearNotifications = () => {\n      \n      let index = this.state.notifications.findIndex((notification:{id:number}) => notification.id ===\n        this.state.channel.id);\n      \n        if(index !== -1) {\n          let updatedNotifications = [...this.state.notifications];\n          updatedNotifications[index].total = this.state.notifications[index].lastKnownTotal;\n          updatedNotifications[index].count = 0;\n          this.setState({ notifications: updatedNotifications});\n        }\n    }\n\n    addNotificationListener = (channelId:number) => {\n      this.state.messagesRef.child(channelId).on('value', (snap:any) => {\n        if(this.state.channel) {\n          this.handleNotifications(channelId, this.state.channel.id, this.state.notifications,snap)\n        }\n      })\n    }  \n    \n    handleNotifications = (channelId: number, currentChannelId: any, notifications:any, snap:any) => {\n      let lastTotal = 0;\n\n      let index = notifications.findIndex((notification:{id:number}) => notification.id === channelId);\n    \n      if(index !== -1) {\n        if(channelId !== currentChannelId) {\n          lastTotal = notifications[index].total;\n          if(snap.numChildren() - lastTotal > 0) {\n            notifications[index].count = snap.numChildren() - lastTotal;\n          }\n        }\n        notifications[index].lastKnownTotal = snap.numChildren();\n      } else {\n        notifications.push({\n          id: channelId,\n          total: snap.numChildren(),\n          lastKnownTotal:snap.numChildren(),\n          count: 0\n        });\n      }\n      this.setState({notifications});\n    } \n\n   setActiveChannel = (channel:Channel) =>  this.setState({activeChannel: channel.id})\n\n   getNotificationCount = (channel:Channel) => {\n     let count = 0;\n\n     this.state.notifications.forEach((notification:{id:number, count:number}) => {\n       if(notification.id === channel.id) {\n         count = notification.count;\n       }\n     });\n     if(count > 0) return count;\n   }\n\n    displayChannels = (channels:[object]) => (\n        channels.length > 0 && channels.map( (channel:any) => (\n            <Menu.Item\n                key={channel.id+channel.name}\n                onClick={() => this.changeChannel(channel)}\n                name={channel.name}\n                style={{opacity:0.7}}\n                active={channel.id === this.state.activeChannel}\n            >\n              {this.getNotificationCount(channel) && \n               (<Label color='red'>{this.getNotificationCount(channel)}</Label>)}\n                # {channel.name}\n\n            </Menu.Item>\n        ))\n    )\n    /*Add */\n    addChannel = () => {\n        const {channelsRef, channelName, channelDetails, user} = this.state;\n        // console.log('CHANNELREF.KEY: ', channelsRef.key);\n        console.log('Firebase Database Ref: ', channelsRef);\n        const key = channelsRef.push().key;\n        // console.log('CONSOLE LOG KEY: ', key);\n        console.log('USERNAME: ', user);\n        const newChannel = {\n            id:key,\n            name:channelName,\n            details: channelDetails,\n            createdBy: {\n                name: user.displayName,\n                avatar: user.photoURL\n            }\n        }\n        channelsRef\n            .child(key)\n            .update(newChannel)\n            .then(() => {\n                this.setState({channelName: '', channelDetails: ''});\n                this.closeModal();\n                console.log('channel added');\n            })\n            .catch( (error:Error) => {\n                console.log('Catched Error:', error);\n            })\n    }\n\n    handleSubmit = (event:FormEvent) => {\n        event.preventDefault();\n        if(this.isFormValid(this.state)) {\n            this.addChannel();\n            console.log('channel added');\n        }\n    }\n    openModal = () => this.setState({ isModalOpen: true });\n\n    closeModal = () => this.setState({isModalOpen: false});\n    \n    handleChange = (event:InputEvent) => {\n        this.setState({ [event.currentTarget.name]: event.currentTarget.value})\n    }\n\n    isFormValid = ({channelName, channelDetails}:IState) => channelName && channelDetails;\n    render() {\n\n        let {channels, isModalOpen} = this.state;\n        return (\n        <React.Fragment>\n        <Menu.Menu className=\"menu\">\n          <Menu.Item>\n            <span>\n              <Icon name=\"exchange\" /> CHANNELS\n            </span>{\" \"}\n            ({channels.length}) <Icon name=\"add\" onClick={this.openModal} />\n          </Menu.Item>\n          {this.displayChannels(channels)}\n        </Menu.Menu>\n\n        {/* Add Channel Modal */}\n        <Modal basic open={isModalOpen} onClose={this.closeModal}>\n          <Modal.Header>Add a Channel</Modal.Header>\n          <Modal.Content>\n            <Form onSubmit={this.handleSubmit}>\n              <Form.Field>\n                <Input\n                  fluid\n                  label=\"Name of Channel\"\n                  name=\"channelName\"\n                  onChange={this.handleChange}\n                />\n              </Form.Field>\n\n              <Form.Field>\n                <Input\n                  fluid\n                  label=\"About the Channel\"\n                  name=\"channelDetails\"\n                  onChange={this.handleChange}\n                />\n              </Form.Field>\n            </Form>\n          </Modal.Content>\n\n          <Modal.Actions>\n            <Button color=\"green\" inverted onClick={this.handleSubmit}>\n              <Icon name=\"checkmark\" /> Add\n            </Button>\n            <Button color=\"red\" inverted onClick={this.closeModal}>\n              <Icon name=\"remove\" /> Cancel\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </React.Fragment>\n        )\n    }\n}\n\n\nexport default connect<any, any>(\n    null,\n    { setCurrentChannel, setPrivateChannel }\n  )(Channels);\n  \n","import React from 'react';\nimport firebase from '../../../firebase';\nimport {Menu, Icon} from 'semantic-ui-react';\nimport ComponentType from '../../../ComponentType';\nimport {connect} from 'react-redux';\nimport {setCurrentChannel, setPrivateChannel} from '../../../store/actions';\nimport { any } from 'prop-types';\n\ntype UserType = {status: string, name: string, uid: string };\n\ninterface IProps {\n    currentUser:UserType,\n    setCurrentChannel?:any,\n    setPrivateChannel?:any,\n}\n\nclass DirectMessages extends ComponentType<IProps> {\n\n    state = {\n        activeChannel: '',\n        user: this.props.currentUser,\n        users: [], \n        usersRef: firebase.database().ref('users'),\n        connectedRef: firebase.database().ref('.info/connected'),\n        presenceRef: firebase.database().ref('presence')\n    }\n\n    componentDidMount() {\n        if(this.state.user) {\n            this.addListeners(this.state.user.uid);\n        }\n    }\n\n    addListeners = (currentUserUid:string) => {\n        let loadedUsers: Array<object> = [];\n        this.state.usersRef.on('child_added', (snap:any ) => {\n            if(currentUserUid !== snap.key) {\n                let user = snap.val();\n                user['uid'] = snap.key;\n                user['status'] = 'offline';\n                loadedUsers.push(user);\n                this.setState({users: loadedUsers});\n            }\n        })\n\n        this.state.connectedRef.on('value', snap => {\n            if(snap.val() === true) {\n                const ref = this.state.presenceRef.child(currentUserUid);\n                ref.set(true);\n                ref.onDisconnect().remove((err) => {\n\n                })\n            }\n        })\n\n        this.state.presenceRef.on('child_added', (snap: any) => {\n            if(currentUserUid !== snap.key) {\n                this.addStatusToUser(snap.key);\n            }\n        });\n        this.state.presenceRef.on('child_removed', (snap: any) => {\n            if(currentUserUid !== snap.key) {\n                this.addStatusToUser(snap.key, false);\n            }\n        });\n    }\n\n    addStatusToUser = ( userId: string, connected = true) => {\n        const updatedUsers = this.state.users.reduce((acc:any, user:{uid: string, status: string}) => {\n            if(user.uid === userId) {\n                user['status'] = `${connected ? 'online' : 'offline'}`;\n            }\n            return acc.concat(user);\n        }, []);\n        this.setState({users: updatedUsers});\n    }\n\n    isUserOnline = (user:UserType) => user.status === 'online'\n    \n    // Each user is still considered a channel, so here we use user id for reference to change channels\n    changeChannel = (user:UserType) => {\n        const channelId = this.getChannelId(user.uid);\n        const channelData = {\n            id: channelId,\n            name: user.name\n        }\n        this.props.setCurrentChannel(channelData);\n        this.props.setPrivateChannel(true);\n        this.setActiveChannel(user.uid);\n    }\n\n    getChannelId = (userId:string) => {\n        const currentUserId = this.state.user.uid;\n        return userId < currentUserId ?\n         `${userId}/${currentUserId}` : `${currentUserId}/${userId}`;\n    }\n\n    setActiveChannel = (userId: string) => {\n        this.setState({ activeChannel: userId });\n    }\n\n    render() {\n        const { users, activeChannel } = this.state;\n        return (\n            <Menu.Menu className='menu'>\n                <Menu.Item>\n                    <span>\n                        <Icon name='mail' /> DIRECT MESSAGES\n                    </span>{' '}\n                    ({ users.length })\n                </Menu.Item>\n                {/* Users to send Direct Messages */}\n                {users.map((user:UserType) => (\n                    <Menu.Item\n                        key={user.uid}\n                        active={user.uid === activeChannel}\n                        onClick={() => this.changeChannel(user)}\n                        style={{opacity: 0.7, fontStyle: 'italic'}}\n                    >\n                        <Icon \n                            name=\"circle\"\n                            color={this.isUserOnline(user) ? 'green' : 'red'}\n                        />\n                        @ {user.name}    \n                        </Menu.Item>\n                ))}\n            </Menu.Menu>\n        )\n    }\n}\nexport default connect<any, any>(null, {setCurrentChannel, setPrivateChannel})(DirectMessages);","import React, {useState} from 'react';\nimport {Menu, Label, Icon} from 'semantic-ui-react';\nimport {IChannel} from '../../App';\nimport {setPrivateChannel, setCurrentChannel} from '../../../store/actions';\nimport { connect } from 'react-redux';\n\ninterface IProps {\n    setCurrentChannel: (channel:object) => any,\n    setPrivateChannel: (isPrivate:boolean) => any,\n}\n\nconst Starred = (props:IProps) => {\n    const [starredChannels, setStarred] = useState<[object?]>([]);\n    const [activeChannel, setActive] = useState({});\n    const [openModal, setOpenModal] = useState<boolean>(false);\n    \n    const setActiveChannel = (channel:IChannel) =>  setActive(channel);\n\n    const changeChannel = (channel:IChannel) => {\n        props.setCurrentChannel(channel);\n        setActiveChannel(channel);\n        props.setPrivateChannel(false);\n    }\n\n    const displayChannels = (channels:[object]) => (\n        channels.length > 0 && channels.map( (channel:any) => (\n            <Menu.Item\n                key={channel.id+channel.name}\n                onClick={() => changeChannel(channel)}\n                name={channel.name}\n                style={{opacity:0.7}}\n                active={channel.id === activeChannel}\n            >\n              # {channel.name}\n\n            </Menu.Item>\n        ))\n    )\n\n    return <>\n    <Menu.Menu className=\"menu\">\n          <Menu.Item>\n            <span>\n              <Icon name=\"star\" /> STARRED\n            </span>{\" \"}\n            ({starredChannels.length}) <Icon name=\"add\" onClick={openModal} />\n          </Menu.Item>\n          {displayChannels}\n        </Menu.Menu>\n\n    </>;\n}\n\nexport default connect(null, { setCurrentChannel, setPrivateChannel})(Starred);","import React from 'react';\nimport ComponentType from '../../ComponentType';\nimport { Menu } from 'semantic-ui-react';\nimport UserPanel from './userpanel/UserPanel';\nimport Channels from './channels/Channels';\nimport DirectMessages from './directmessages/DirectMessages';\nimport Starred from './starred/Starred';\n\n\nclass SidePanel extends ComponentType {\n    render() {\n        const { currentUser } = this.props;\n\n        return (\n            <Menu\n                size=\"large\"\n                inverted\n                fixed=\"left\"\n                vertical\n                style={{background: \"#4c3c4c\", fontSize: \"1.2rem\"}}\n            >   \n                <UserPanel currentUser={currentUser} />\n                <Starred />\n                <Channels currentUser={currentUser} />\n                <DirectMessages currentUser={currentUser} />\n            </Menu>\n        )\n    }\n}\nexport default SidePanel;","import React from 'react';\nimport ComponentType from '../../ComponentType';\n\nclass MetaPanel extends ComponentType {\n    state = {\n\n    }\n    render() {\n        return (\n            <div>MetaPanel</div>\n        )\n    }\n}\nexport default MetaPanel;","import React from 'react';\nimport { Progress } from 'semantic-ui-react';\nimport styles from './ProgressBar.module.scss';\n\ninterface IProps {\n    uploadState:string,\n    percentUploaded:number,\n}\n\nconst ProgressBar = ({uploadState, percentUploaded}:IProps) =>\n    uploadState === 'uploading' ?  <Progress\n                        className={styles.progressBar}\n                        percent={percentUploaded}\n                        progress    \n                        indicating\n                        size='medium'\n                        inverted />\n                    :\n                   <> </>;\n\n\nexport default ProgressBar;","import React from 'react';\nimport { Modal, Input, Icon, Button } from 'semantic-ui-react'; \nimport ComponentType from '../../../../ComponentType';\nimport {InputEvent} from '../../../../ComponentType';\nimport mime from 'mime-types';\n\n\nclass FileModal extends ComponentType {\n    state:any = {\n        file: null,\n        authorized: ['image/jpeg', 'image/png'],\n    }\n\n    addFile = (event:InputEvent) => {\n        // event.currentTarget.files[0] was giving a 'possibly null error' where the \n        // type was identified as 'FILE | null'.So below(line22 setState({file: files[0]})), where \n        // checked if file is null I set state.file to be the index 0, file[0]\n        const files = event.currentTarget.files;\n        \n        if(files != null) {\n            this.setState({file: files[0]});\n            console.log(\"FileModal -> State FILES: \", files);\n        }\n\n    };\n    sendFile = () => {\n        const {file} = this.state;\n        const {uploadFile, closeModal} = this.props;\n\n        if(file !== null) {\n            if(this.isAuthorized(file.name)) {\n                // send file\n                const metadata = { contentType: mime.lookup(file.name) };\n                uploadFile(file, metadata);\n                closeModal();\n                this.clearFile();\n            }\n        }\n    }\n\n    // lookup = () => {\n        \n    //    let result = mime.lookup(filename); \n    //    results === true ? 'true' : '';\n    // }\n    //                                        includes takes in any returns boolean\n    //                                         mime  takes in string returns false\n    \n    // Check to see if file is an authorized type to be uploaded, using state.authorized\n    isAuthorized = (filename:any) => this.state.authorized.includes(mime.lookup(filename));\n    \n    clearFile = () => this.setState({file: null});\n\n\n    render() {\n        const {modal, closeModal} = this.props;\n        return ( \n                    <Modal basic open={modal} onClose={closeModal}>\n                        <Modal.Header>Select an Image Files</Modal.Header>\n                        <Modal.Content>\n                            <Input\n                                onChange={this.addFile}\n                                fluid\n                                label='File types: jpg, png'\n                                name='file'\n                                type='file'\n                            />\n                        </Modal.Content>\n                        <Modal.Actions>\n                            <Button\n                                color='green'\n                                inverted\n                                onClick={this.sendFile}\n                            >\n                                <Icon name='checkmark' /> Send\n                            </Button>\n                            <Button\n                                color='red'\n                                inverted\n                                onClick={closeModal}\n                            > \n                                <Icon name='remove' /> Cancel\n                            </Button>\n                        </Modal.Actions>\n                    </Modal>\n                );\n            }\n}\nexport default FileModal;","import React from 'react';\nimport uuidv4 from 'uuid/v4';\nimport firebase from '../../../firebase';\nimport {Segment, Button, Input} from 'semantic-ui-react';\nimport ComponentType from '../../../ComponentType';\nimport ProgressBar from '../progressbar/ProgressBar';\nimport styles from './MessageForm.module.scss';\nimport FileModal from './filemodal/FileModal';\n\n/**\n * FormEvent for Submiting the form\n * InputEven for Event.target properties such as currentTarget.value & name\n */\ntype FormEvent = React.FormEvent<HTMLFormElement>;\ntype InputEvent = React.FormEvent<HTMLInputElement>;\n\n// interface IState {\n//     message:string,\n//     channel:object,\n//     user:object,\n//     loading:boolean,\n//     errors:[ConcatArray<ErrorConstructor>, {message:}]\n// }\ninterface IState {\n        storageRef:any,\n        uploadTask: any,\n        uploadState: string,\n        percentUploaded: number,\n        message: string,\n        channel: {id: number},\n        user: {\n               uid: any,\n               displayName: string,\n               photoURL: string\n            },\n        loading: boolean,\n        errors: [{message: string}],\n        modal: boolean,\n}\n\n\ninterface IProps {\n    currentChannel: {id: number},\n    currentUser: {  \n                    uid: any,\n                    displayName: string,\n                    photoURL: string\n                },\n    messagesRef: any,\n    isPrivateChannel: boolean,\n    getMessagesRef: any,\n}\n\nclass MessageForm extends ComponentType<IProps> {\n    state:IState = {\n        storageRef: firebase.storage().ref(),\n        uploadTask: null,\n        uploadState: '',\n        percentUploaded: 0,\n        message: '',\n        channel: this.props.currentChannel,\n        user: this.props.currentUser,\n        loading: false,\n        errors: [{message: ''}],\n        modal: false,\n    }\n\n    openModal = () => this.setState({modal: true});\n\n    closeModal = () => this.setState({modal: false});\n\n    handleChange = (event:InputEvent) => {\n        this.setState({[event.currentTarget.name]: event.currentTarget.value});\n    }\n    /**\n     * Creates a message object with timestamp, user, & content properties\n     * @function createMessage\n     * @returns {message:object}\n     */\n    createMessage = (fileUrl?:string):object => {\n        let message: {\n            timestamp:object,\n            user: {\n                id: number,\n                name: string,\n                avatar: string,\n            },\n            image: string,\n            content: string,\n        } \n            message = {\n            timestamp: firebase.database.ServerValue.TIMESTAMP,\n            user: {\n                id: this.state.user.uid,\n                name: this.state.user.displayName,\n                avatar: this.state.user.photoURL\n            },\n            image: '',\n            content: ''\n        };\n\n        if(fileUrl !== null && fileUrl) {  //   ???? CHECKING FOR 'N U L L' ????\n            message['image'] = fileUrl;\n        } else {\n            message['content'] = this.state.message;\n        }\n\n        return message;\n    }\n    /**\n     * If there's a message then set the firebase messagesRef properties and state.loading to true\n     * @function sendMessage\n     * @param {undefined}\n     * @returns {void}\n     */\n    sendMessage = (): void => {\n        const { getMessagesRef } = this.props;\n        const { message, channel } = this.state;\n\n        if(message) {\n            this.setState({loading: true});\n            getMessagesRef()\n                .child(channel.id)\n                .push()\n                .set(this.createMessage())\n                .then(() => {\n                    this.setState({loading:false, message: '', errors:[] })\n                })\n                .catch( (err:ConcatArray<{message:string}>) => {\n                    console.error(err);\n                    this.setState({\n                        loading: false,\n                        errors: this.state.errors.concat(err)\n                    })\n                })\n        }        \n        else {\n            this.setState({\n                errors: this.state.errors.concat({ message: 'Add a message' })\n            })\n        }\n    }\n\n    getPath = () => {\n        if(this.props.isPrivateChannel) {\n            return `chat/private-${this.state.channel.id}`;\n        } else {\n            return 'chat/public';\n        }\n    }\n\n    uploadFile = (file:any, metadata:any) => {\n        const pathToUpload = this.state.channel.id;\n        const ref = this.props.messagesRef();\n        //UUID creates random strings for pictures such as seen in social media imgs\n        const filePath = `${this.getPath()}/${uuidv4()}.jpg`;\n        \n        this.setState({\n            uploadState: 'uploading',\n            uploadTask: this.state.storageRef.child(filePath).put(file, metadata)\n\n        },  () => {\n            this.state.uploadTask.on('state_changed', (snap:any) => {\n                const percentUploaded = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\n                this.setState({percentUploaded});\n            },\n                (err:Error) => {\n                    console.log(err);\n                    this.setState({\n                        errors: this.state.errors.concat(err),\n                        uploadState: 'error',\n                        uploadTask: null,\n                    })\n                },\n                () => {\n                    this.state.uploadTask.snapshot.ref.getDownloadURL().then((downloadUrl:string) => {\n                        this.sendFileMessage(downloadUrl, ref, pathToUpload);\n                    })\n                    .catch((err:Error)  => {\n                        console.log(err);\n                        this.setState({\n                            errors: this.state.errors.concat(err),\n                            uploadState: 'error',\n                            uploadTask: null,\n                        })\n                    })\n                }\n            )\n        });\n\n    }//=>END OF uploadFile\n\n    sendFileMessage = (fileUrl:string, ref:any, pathToUpload:number) => {\n        ref.child(pathToUpload)   \n           .push()\n           .set(this.createMessage(fileUrl))\n           .then(() => {\n               this.setState({uploadState: 'done'})\n           })\n           .catch((err:Error) => {\n            console.error(err);\n            this.setState({\n                errors: this.state.errors.concat(err)  \n            })\n           })\n    }\n\n    render() {\n  \n        const {errors, message, modal, loading, uploadState, percentUploaded} = this.state;\n\n        return (\n\n            <Segment\n             className={styles.messageForm}\n            >\n                <Input \n                    fluid\n                    name='message'\n                    onChange={this.handleChange}\n                    value={message}\n                    style={{marginBottom: '0.7em'}}\n                    label={<Button icon={'add'} />}\n                    labelPosition='left'\n                    placeholder='Write your message'\n                    className={\n                        errors.some(error => error.message.includes('message')) \n                        ? 'error' \n                        : ''\n                    }\n                    />\n\n            <Button.Group icon widths='1'>\n                <Button\n                    onClick={this.sendMessage}\n                    disabled={loading}\n                    color='orange'\n                    content='Add Replay'\n                    labelPosition='left'\n                    icon='edit'\n                />\n                <Button\n                    color='teal'\n                    disabled={uploadState === 'uploading'}\n                    onClick={this.openModal}\n                    content='Upload Media'\n                    labelPosition='right'\n                    icon='cloud upload'\n                    />\n\n            </Button.Group>        \n                <FileModal\n                    modal={modal}\n                    closeModal={this.closeModal}\n                    uploadFile={this.uploadFile}\n                    />\n                <ProgressBar\n                    uploadState={uploadState} \n                    percentUploaded={percentUploaded}\n                />\n            </Segment>\n\n        )\n    }\n}\n\nexport default MessageForm;","import React from 'react';\nimport {Header, Segment, Input, Icon} from 'semantic-ui-react';\nimport ComponentType, {InputEvent, FormEvent} from '../../../ComponentType';\n\n\ninterface IProps {\n    channelName: string,\n    numUniqueUsers: number,\n    handleSearchChange:(event:any) => void,\n    searchLoading: boolean,\n    isPrivateChannel: boolean,\n    isChannelStarred: boolean,\n    handleStar: () => any,\n}\n\nclass MessagesHeader extends ComponentType<IProps> {\n\n    render() {\n        const {channelName, numUniqueUsers, handleSearchChange, \n            searchLoading, isPrivateChannel, isChannelStarred,\n            handleStar} = this.props;\n        return (\n            <Segment clearing>\n                {/* Channel Title */}\n                <Header fluid='true' as='h2' floated='left' style={{ marginBottom: 0 }}>\n                    <span>\n                       {channelName}\n                       {!isPrivateChannel && (\n                       <Icon \n                            onClick={handleStar} \n                            name={isChannelStarred ? 'star' : 'star outline'} \n                            color={ isChannelStarred ? 'yellow' : 'black'} \n                        />)}\n                    </span>\n                    \n                    <Header.Subheader>{numUniqueUsers}</Header.Subheader>\n                </Header>\n\n                {/* Channel Search Input */}\n                <Header>\n                <Input\n                    loading={searchLoading}\n                    onChange={handleSearchChange}\n                    size=\"mini\"\n                    icon=\"search\"\n                    name=\"searchTerm\"\n                    placeholder=\"Search Messages\"\n                />\n\n                </Header>\n            </Segment>\n        );\n    }\n}\n\nexport default MessagesHeader;","import React from 'react';\nimport moment from 'moment';\nimport { Comment, Image } from 'semantic-ui-react';\n\ntype messageType = {timestamp:number};\n\ninterface IState {\n    key:number, \n    message:messageType,\n    user: object\n}\n\nconst isOwnMessage = (message:any, user:any) => \n    message.user.id === user.uid ? 'message__self' : '';\n\nconst isImage = (message:any) => \n    message.image !== '' && message.content === '';\n\n\nconst timeFromNow = (timestamp:number) => moment(timestamp).fromNow();\n\nconst Message = ({message, user}:any) => (\n        <>\n        <Comment>\n            <Comment.Avatar src={message.user.avatar} />\n            <Comment.Content className={isOwnMessage(message, user)}>\n                <Comment.Author as='a'>{message.user.name}</Comment.Author>\n                <Comment.Metadata>{timeFromNow(message.timestamp)}</Comment.Metadata>\n               \n                {isImage(message) ?\n                     <Image src={message.image} className=\"message__image\" />\n                    : \n                     <Comment.Text>{message.content}</Comment.Text>    \n            }\n            </Comment.Content>\n        </Comment>\n        </>\n    );\nexport default Message;\n ","import React from 'react';\nimport { Segment, Comment } from 'semantic-ui-react';\nimport MessageForm from './messageform/MessageForm'; \nimport MessagesHeader from './messagesheader/MessagesHeader';\nimport ComponentType from '../../ComponentType'; \nimport Message from './message/Message';\nimport styles from './Messages.module.scss';\nimport firebase from '../../firebase'; \nimport {InputEvent, FormEvent} from '../../ComponentType';\n\n\ninterface IProps {\n    key: any,\n    currentChannel: object,\n    currentUser: object,\n    isPrivateChannel: boolean,\n    handleStar?: () => void,\n    starChannel?: () => void\n}\n\ninterface IState {\n    privateChannel: boolean,\n    privateMessagesRef: any,\n    messagesRef: any,\n    messages: [],\n    messagesLoading: boolean,\n    channel: object,\n    user: object,\n    numUniqueUsers: string,\n    searchTerm: string,\n    searchLoading: boolean,\n    searchResults: [],\n    isChannelStarred: boolean\n}\n\nclass Messages extends ComponentType<IProps> {\n    state:any = {\n        privateChannel: this.props.isPrivateChannel,\n        privateMessagesRef: firebase.database().ref(\"privateMessages\"),\n        messagesRef: firebase.database().ref('messages'),\n        messages: [],\n        messagesLoading: true,\n        channel: this.props.currentChannel,\n        user: this.props.currentUser,\n        numUniqueUsers: '',\n        searchTerm: '',\n        searchLoading: false,\n        searchResults: [],\n        isChannelStarred: false,\n    }\n\n    componentDidMount() {\n       const { channel, user } = this.state;\n    //    const channelId = this.state.channel.id;\n    //    console.log('Messages.tsx -> State channel.id: ', this.state.channel.id);\n       if(channel && user) {\n        // console.log('(2) Messages.tsx -> State channel.id: ', this.state.channel.id);\n            this.addListeners(channel.id);\n       }\n    }\n     \n    addListeners = (channelId:any) => {\n        this.addMessageListener(channelId);\n        return channelId;\n    }\n    /**\n     * Pull data from messagesRef snap values in to loadedmessages\n     * Set loadedMessages into state messages[] and set loading to false\n     * @param {channelID:string} \n     * @return {void}\n     */\n    addMessageListener = (channelId: any):void => {\n        let loadedMessages:Array<any> = [];\n        const ref = this.getMessagesRef();\n        ref.child(channelId).on(\"child_added\", (snap:any) => {\n          loadedMessages.push(snap.val());\n          this.setState({\n            messages: loadedMessages,\n            messagesLoading: false\n          });\n          this.countUniqueUsers(loadedMessages);\n        });\n      };\n\n    getMessagesRef = () => {\n        const { messagesRef, privateMessagesRef, privateChannel } = this.state;\n        return privateChannel ? privateMessagesRef : messagesRef;\n      };\n\n    handleStar = () => {\n        this.setState((prevState:{isChannelStarred: boolean}) => ({\n            isChannelStarred: !prevState.isChannelStarred\n        }), () => this.starChannel());\n    }\n\n    starChannel = () => {\n        if(this.state.isChannelStarred) {\n            console.log('star');\n        } else {\n            console.log('unstar');\n        }\n    }\n    /**\n     * Function that's passed so that MessageHeader can \n     * have an effect in this upper Component Messages.\n     * Changes the search term in Messages and searchLoading:true.\n     */\n    handleSearchChange = (event:InputEvent) => {\n         this.setState({\n             searchTerm: event.currentTarget.value,\n             searchLoading: true,\n         }, () => this.handleSearchMessages());\n    }\n\n    handleSearchMessages = () => {\n        const channelMessages = [...this.state.messages];\n        const regex = new RegExp(this.state.searchTerm, 'gi');\n        const searchResults = channelMessages.reduce((acc, message) => {\n            if(message.content && message.content.match(regex) ||\n               message.user.name.match(regex)\n            ) {\n                acc.push(message);\n            }\n            return acc;\n        }, []);\n        this.setState({ searchResults });\n        setTimeout(() => this.setState({ searchLoading: false}), 1000);\n    }\n\n    //check to see if accumulator includes a specific name from 'messages' to see if its unique\n    countUniqueUsers = (messages:Array<any>) => {\n        const uniqueUsers = messages.reduce((acc,message) => {\n            if(!acc.includes(message.user.name)) {\n                acc.push(message.user.name);\n            }\n            return acc;\n        },[]);\n        const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\n        const numUniqueUsers = `${uniqueUsers.length} user${plural ? \"s\" : \"\"}`;\n        this.setState({numUniqueUsers});\n    }\n\n    displayMessages = (messages:Array<any>) => (\n        messages.length > 0 && messages.map((message:{timestamp:number}) => (\n            <Message \n                key={message.timestamp}\n                message={message}\n                user={this.state.user}\n            />\n        ))\n    )\n    \n    // isProgressBarVisible = (percent:number) => {\n    //     if(percent > 0) {\n    //         this.setState({progressBar: true});\n    //     }\n    // }\n    \n    displayChannelName = (channel:{id: number, name: string}) => \n    channel ? `${this.state.privateChannel ? '@' : '#'}${channel.name}` : '';\n    \n    render() {\n        const {messagesRef, messages, channel, user, numUniqueUsers,\n             searchTerm, searchResults, searchLoading, privateChannel, isChannelStarred} = this.state; \n \n        return (\n            <>\n            <MessagesHeader\n                channelName={this.displayChannelName(channel)}\n                numUniqueUsers={numUniqueUsers}\n                handleSearchChange={this.handleSearchChange}\n                searchLoading={searchLoading}\n                isPrivateChannel={privateChannel}\n                handleStar={this.handleStar}\n                isChannelStarred={isChannelStarred}\n            />\n            \n            <Segment> \n                <Comment.Group style={{maxWidth:'98%'}} className={styles.messages}>\n                    {searchTerm ? this.displayMessages(searchResults) :\n                     this.displayMessages(messages)}\n                </Comment.Group>\n            </Segment>\n\n            <MessageForm\n                messagesRef={messagesRef}\n                currentChannel={channel}\n                currentUser={user}\n                isPrivateChannel={privateChannel}\n                getMessagesRef={this.getMessagesRef}\n            />\n            </>\n        )\n    }\n}\nexport default Messages;\n","import React from 'react';\nimport {Grid} from 'semantic-ui-react';\nimport ColorPanel from './colorpanel/ColorPanel'; \nimport SidePanel from './sidepanel/SidePanel';\nimport MetaPanel from './metapanel/MetaPanel'; \nimport Messages from './messages/Messages';\nimport {connect} from 'react-redux';\n\n// Exported Types\nexport type InputEvent = React.FormEvent<HTMLInputElement>;\nexport type FormEvent = React.FormEvent<HTMLFormElement>;\nexport type User = {displayName:string, photoURL:string};\nexport type Notification = {\n  id: number,\n  total: number,\n  lastKnownTotal: number,\n  count: number,\n}\n\nexport interface IChannel {id:number, name:string};\n\nexport interface INewChannel {\n    id: string,\n    name: string,\n    details: string,\n    createdBy: {\n        name: string,\n        avatar: string\n    }\n}\n\nexport interface Store extends React.Props<any> {\n  store?: any;\n}\n\n// Non Exported types\ninterface Props {\n  currentUser:{displayName:string}\n}\n\nconst App: React.FC = ({currentUser, currentChannel, isPrivateChannel}:any) => {\n  return (\n    <Grid columns=\"equal\" className=\"app\" style={{background: '#eee'}}>\n      <ColorPanel />\n      <SidePanel\n        key={currentUser && currentUser.uid}\n        currentUser={currentUser} />\n\n      <Grid.Column style={{marginLeft: 320}}>\n        <Messages\n          key={currentChannel && currentChannel.id}\n          currentChannel={currentChannel}\n          currentUser={currentUser}\n          isPrivateChannel={isPrivateChannel}\n        />\n      </Grid.Column>\n\n      <Grid.Column width={4}>\n        <MetaPanel />      \n      </Grid.Column>\n    </Grid>\n    );\n};\n\nconst mapStateToProps = (state:any):any => ({\n  currentUser: state.user.currentUser,\n  currentChannel: state.channel.currentChannel,\n  isPrivateChannel: state.channel.isPrivateChannel\n}); \n\nexport default connect(mapStateToProps)(App);","import React from \"react\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Button,\n  Header,\n  Message,\n  Icon\n} from \"semantic-ui-react\";\nimport ComponentType from \"../../../ComponentType\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./Login.module.scss\";\nimport firebase from 'firebase';\n\ntype FormEvent = React.FormEvent<HTMLFormElement>;\ntype InputEvent = React.FormEvent<HTMLInputElement>;\n\ninterface IErrorMessage {\n  message: string;\n}\n\ninterface IForm {\n  email: string;\n  password: string;\n  errors: Array<IErrorMessage>; // IErrorMessage is casted, not required when casted\n  loading: boolean;\n}\n\nclass Login extends ComponentType {\n  // const Register = () => {\n  state: IForm = {\n    email: \"\",\n    password: \"\",\n    errors: [],\n    loading: false\n  };\n  displayErrors = (errors: Array<IErrorMessage>) =>\n    errors.map((error: IErrorMessage, i) => <p key={i}>{error.message}</p>);\n\n  //Typescript uses event.currentTarget instead of event.target along with dot notation '.value'\n  //InputEvent has been declared above with React.FormEvent<....>\n  handleChange = (event: InputEvent) => {\n    this.setState({ [event.currentTarget.name]: event.currentTarget.value });\n  };\n  handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    if (this.isFormValid(this.state)) {\n      this.setState({ errors: [], loading: true });\n    firebase\n        .auth()\n        .signInWithEmailAndPassword(this.state.email, this.state.password)\n        .then(signedInUser => {\n            console.log(signedInUser);\n        })\n        .catch(err => {\n            console.error(err);\n            this.setState({\n                errors: this.state.errors.concat(err),\n                loading: false\n            })\n        })\n    }\n  };\n\n  isFormValid = (credentials:{email:string, password:string}) => credentials.email && credentials.password;\n\n  handleInputError = (errors: Array<IErrorMessage>, inputName: string) =>\n    errors.some(error => error.message.toLowerCase().includes(inputName))\n      ? \"error\"\n      : \"\";\n\n  render() {\n    const { email, password, errors, loading } = this.state;\n    return (\n      <Grid\n        textAlign=\"center\"\n        verticalAlign=\"middle\"\n        className={styles.register}\n        data-test=\"register-component\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h1\" icon color=\"violet\" textAlign=\"center\">\n            <Icon name=\"code branch\" color=\"violet\" />\n            Login For DevChat\n          </Header>\n          <Form onSubmit={this.handleSubmit}>\n            <Segment stacked>\n              <Form.Input\n                fluid\n                name=\"email\"\n                icon=\"mail\"\n                iconPosition=\"left\"\n                placeholder=\"Email Address\"\n                value={email}\n                className={this.handleInputError(errors, \"email\")}\n                onChange={this.handleChange}\n                type=\"email\"\n              />\n\n              <Form.Input\n                fluid\n                name=\"password\"\n                icon=\"repeat\"\n                iconPosition=\"left\"\n                placeholder=\"Password\"\n                value={password}\n                className={this.handleInputError(errors, \"password\")}\n                onChange={this.handleChange}\n                type=\"password\"\n              />\n\n              <Button\n                disabled={loading}\n                className={loading ? \"loading\" : \" \"}\n                color=\"violet\"\n                fluid\n                size=\"large\"\n              >\n                Submit\n              </Button>\n            </Segment>\n\n            <Message>\n              Don't have an account?\n              <Link to=\"/register\">Register</Link>\n            </Message>\n          </Form>\n          {errors.length > 0 && (\n            <Message error>\n              <h3>Error</h3>\n              {this.displayErrors(errors)}\n            </Message>\n          )}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\nexport default Login;\n","import React, { FormEventHandler } from \"react\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Button,\n  Header,\n  Message,\n  Icon\n} from \"semantic-ui-react\";\nimport ComponentType from \"../../../ComponentType\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./Register.module.scss\";\nimport firebase from \"../../../firebase\"; \nimport md5 from \"md5\";\n\ntype FormEvent = React.FormEvent<HTMLFormElement>;\ntype InputEvent = React.FormEvent<HTMLInputElement>;\n\ninterface IErrorMessage {\n  message: string;\n}\n\ninterface IForm {\n  username:string;\n  email:string;\n  password:string;\n  passwordConfirmation:string;\n  errors:Array<IErrorMessage>; // IErrorMessage is casted, not required when casted\n  loading:boolean,\n  usersRef:any,\n  // value:string\n}\n\nexport class Register extends ComponentType {\n  // const Register = () => {\n  state: IForm = {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConfirmation: \"\",\n    errors: [],\n    loading: false,\n    usersRef: firebase.database().ref('users'),\n    // value: ''\n  };\n  displayErrors = (errors: Array<IErrorMessage>) =>\n    errors.map((error: IErrorMessage, i) => <p key={i}>{error.message}</p>);\n\n  //Typescript uses event.currentTarget instead of event.target along with dot notation '.value'\n  //InputEvent has been declared above with React.FormEvent<....>\n  handleChange = (event: InputEvent) => {\n    this.setState({ [event.currentTarget.name]: event.currentTarget.value });\n  };\n  handleSubmit:FormEventHandler = (event) => {\n    event.preventDefault();\n    if (this.isFormValid()) {\n      this.setState({ errors: [], loading: true });\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(this.state.email, this.state.password)\n        .then((createdUser:any) => {\n          console.log(createdUser);\n          createdUser.user\n            .updateProfile({\n              displayName: this.state.username,\n              photoURL: `http://gravatar.com/avatar/${md5(\n                createdUser.user.email\n              )}?d=identicon`\n            })\n            .then(() => {\n              this.saveUser(createdUser).then(() => {\n                console.log('user saved');\n              })\n            })\n            .catch((err: Error) => {\n              console.error(err);\n              this.setState({\n                errors: this.state.errors.concat(err),\n                loading: false\n              });\n            });\n        })\n        .catch((err: IErrorMessage) => {\n          console.error(err);\n          this.setState({\n            errors: this.state.errors.concat(err),\n            loading: false\n          });\n        });\n    }\n  };\n\n  saveUser = (createdUser:any) => {\n    return  this.state.usersRef.child(createdUser.user.uid).set({\n      name: createdUser.user.displayName,\n      avatar: createdUser.user.photoURL    \n    })\n  }\n\n  handleInputError = (errors: Array<IErrorMessage>, inputName: string) =>\n    errors.some(error => error.message.toLowerCase().includes(inputName))\n      ? \"error\"\n      : \"\";\n\n  isFormValid = () => {\n    let errors: Array<IErrorMessage> = this.state.errors;\n    let error;\n    if (this.isFormEmpty(this.state)) {\n      error = { message: \"Fill In All Fields\" };\n      this.setState({ errors: errors.concat(error) });\n      return false;\n    } else if (!this.isPasswordValid(this.state)) {\n      error = { message: \"Password is invalid\" };\n      this.setState({ errors: errors.concat(error) });\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  isFormEmpty = (form: IForm) => {\n    return (\n      !form.username.length ||\n      !form.email.length ||\n      !form.password.length ||\n      !form.passwordConfirmation.length\n    );\n  }; \n\n  isPasswordValid = (form: IForm) => {\n    let { password, passwordConfirmation } = form;\n    if (password.length < 6 || passwordConfirmation.length < 6) {\n      return false;\n    } else if (password !== passwordConfirmation) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  render() {\n    const {\n      username,\n      email,\n      password,\n      passwordConfirmation,\n      errors,\n      loading\n    } = this.state;\n    return (\n      <Grid\n        textAlign=\"center\"\n        verticalAlign=\"middle\"\n        className={styles.register}\n        data-test=\"register-component\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h1\" icon color=\"orange\" textAlign=\"center\">\n            <Icon name=\"puzzle piece\" color=\"orange\" />\n            Register For DevChat\n          </Header>\n          <Form data-test=\"form-component\" size=\"large\" onSubmit={this.handleSubmit}>\n            <Segment stacked>\n              <Form.Input\n                fluid\n                data-test=\"username-input\"\n                name=\"username\"\n                icon=\"user\"\n                iconPosition=\"left\"\n                placeholder=\"Username\"\n                value={username}\n                onChange={this.handleChange}\n                type=\"text\"\n              />\n              <Form.Input\n                fluid\n                name=\"email\"\n                icon=\"mail\"\n                iconPosition=\"left\"\n                placeholder=\"Email Address\"\n                value={email}\n                className={this.handleInputError(errors, \"email\")}\n                onChange={this.handleChange}\n                type=\"email\"\n              />\n\n              <Form.Input\n                fluid\n                name=\"password\"\n                icon=\"repeat\"\n                iconPosition=\"left\"\n                placeholder=\"Password\"\n                value={password}\n                className={this.handleInputError(errors, \"password\")}\n                onChange={this.handleChange}\n                type=\"password\"\n              />\n\n              <Form.Input\n                fluid\n                name=\"passwordConfirmation\"\n                icon=\"repeat\"\n                iconPosition=\"left\"\n                placeholder=\"Password Confirmation\"\n                value={passwordConfirmation}\n                className={this.handleInputError(errors, \"password\")}\n                onChange={this.handleChange}\n                type=\"password\"\n              />\n\n              <Button\n                data-test=\"component-submit-btn\"\n                disabled={loading}\n                className={loading ? \"loading\" : \" \"}\n                color=\"orange\"\n                fluid\n                size=\"large\"\n              >\n                Submit\n              </Button>\n            </Segment>\n            <Message>\n              Already a user?\n              <Link to=\"/login\">{\" \"}Login</Link>\n            </Message>\n          </Form>\n          {errors.length > 0 && (\n            <Message error>\n              <h3>Error</h3>\n              {this.displayErrors(errors)}\n            </Message>\n          )}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\nexport default Register;\n","import React from 'react';\nimport { Loader, Dimmer } from 'semantic-ui-react';\n\nconst Spinner = () => \n    <Dimmer active>\n        <Loader size=\"huge\" content={\"Preparing Chat...\"} />\n    </Dimmer>\n    \nexport default Spinner;","import { combineReducers } from \"redux\";\nimport * as actionTypes from \"../actions/actionTypes\";\n\nconst initialUserState = {\n  currentUser: null,\n  isLoading: true\n};\n\nconst user_reducer = (state = initialUserState, action:any) => {\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        currentUser: action.payload.currentUser,\n        isLoading: false\n      };\n    case actionTypes.CLEAR_USER:\n      return {\n        ...initialUserState,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\nexport default user_reducer;","import * as actionTypes from '../actions/actionTypes';\nimport {IChannel} from '../actions/setCurrentChannel'\n\n\nconst initialChannelState = {\n  currentChannel: null\n};\n\nconst channel_reducer = (state = initialChannelState, action:any) => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload.currentChannel\n      }\n    case actionTypes.SET_PRIVATE_CHANNEL:\n      return {\n          ...state,\n          isPrivateChannel: action.payload.isPrivateChannel\n      }\n    default:\n      return state;\n  }\n}\nexport default channel_reducer;\n\n\n\n// import * as actionTypes from '../actions/actionTypes';\n// import {ChannelActions, ChannelState} from '../actions/channelActions';\n// // import {IChannel} from '../actions/setCurrentChannel'\n\n\n// const initialChannelState = {\n//   currentChannel: null\n// };\n\n// const channel_reducer = (state = initialChannelState, action:ChannelActions):ChannelState => {\n//   switch (action.type) {\n//     case actionTypes.SET_CURRENT_CHANNEL:\n//       return {\n//         ...state,\n//         currentChannel: action.payload\n//       }\n//     case actionTypes.SET_PRIVATE_CHANNEL:\n//       return {\n//           ...state,\n//           isPrivateChannel: action.payload.isPrivateChannel\n//       }\n//     default:\n//       return state;\n//   }\n// }\n// export default channel_reducer;","//  export defaults allows for you to rename your imports\nimport { combineReducers } from 'redux';\nimport user_reducer from './user_reducer';\nimport channel_reducer from './channel_reducer';\n\nconst rootReducer = combineReducers({\n    user: user_reducer,\n    channel: channel_reducer\n}); \n\nexport default rootReducer; \n\n\n\n// import { combineReducers } from \"redux\";\n// import * as actionTypes from \"../actions/actionTypes\";\n\n// const initialUserState = {\n//   currentUser: null,\n//   isLoading: true\n// };\n\n// const user_reducer = (state = initialUserState, action:any) => {\n//   switch (action.type) {\n//     case actionTypes.SET_USER:\n//       return {\n//         currentUser: action.payload.currentUser,\n//         isLoading: false\n//       };\n//     case actionTypes.CLEAR_USER:\n//       return {\n//         ...state,\n//         isLoading: false\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// const initialChannelState = {\n//   currentChannel: null\n// };\n\n// const channel_reducer = (state = initialChannelState, action:any) => {\n//   switch (action.type) {\n//     case actionTypes.SET_CURRENT_CHANNEL:\n//       return {\n//         ...state,\n//         currentChannel: action.payload.currentChannel\n//       }\n//     default:\n//       return state;\n//   }\n// }\n\n// const rootReducer = combineReducers({\n//   user: user_reducer,\n//   channel: channel_reducer\n// });\n\n// export default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./components/App\";\nimport ComponentType from './ComponentType';\nimport Login from \"./components/auth/login/Login\";\nimport Register from \"./components/auth/register/Register\";\nimport Spinner from \"./components/ui/spinner/Spinner\";\n\nimport \"semantic-ui-react\";\n\nimport { Provider, connect } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\n\nimport rootReducer from \"./store/reducers\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  withRouter\n} from \"react-router-dom\";\n\n//importing action setupUser\nimport { setUser, clearUser } from \"./store/actions/setUser\";\n\nimport firebase from \"./firebase\";\n\nexport const composeEnhancers =\n  (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n// ENZYME COURSE MIDDLEWARES EDIT to export to testUtil.tsx\nexport const middlewares = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nclass Root extends ComponentType {\n  // Root will be in the connect()()\n  componentDidMount() {\n    console.log(this.props.isLoading);\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.props.setUser(user);\n        console.log(\"USER IN INDEX.TSX: \", user.displayName);\n        this.props.history.push(\"/\");\n      } else {\n        this.props.history.push('/login');\n        this.props.clearUser();\n      }\n    });\n  }\n  render() {\n    return this.props.isLoading ? <Spinner /> : (\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n      </Switch>\n    );\n  }\n}\nconst mapStateToProps = (state:{user:{isLoading:boolean}}) => ({\n  isLoading: state.user.isLoading\n});\n\nconst RootWithAuth = withRouter(\n  connect(\n    mapStateToProps,\n    { setUser, clearUser }\n  )(Root)\n);\n\nif (document.getElementById(\"root\")) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router>\n        <RootWithAuth />\n      </Router>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n}\nexport default Root;\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as actionTypes from './actionTypes';\n\nexport interface ISetUser {\n    type: string,\n    payload: {\n        currentUser:string\n    }\n}\n\nexport const setUser = (user:object) => {\n    return {\n        type: actionTypes.SET_USER,\n        payload: {\n            currentUser: user\n        }\n    }\n}\n\nexport const clearUser = () => {\n    return {\n        type: actionTypes.CLEAR_USER\n    }\n}"],"sourceRoot":""}