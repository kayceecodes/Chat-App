{"version":3,"sources":["components/auth/login/Login.module.scss","components/auth/register/Register.module.scss","components/sidepanel/SidePanel.module.scss","components/metapanel/MetaPanel.module.scss","components/messages/messageform/MessageForm.module.scss","components/messages/Messages.module.scss","serviceWorker.ts","ComponentType.tsx","components/colorpanel/ColorPanel.tsx","firebase.tsx","components/sidepanel/userpanel/UserPanel.tsx","store/actions/setCurrentChannel.tsx","store/actions/actionTypes.tsx","store/actions/setPrivateChannel.tsx","components/sidepanel/channels/Channels.tsx","components/sidepanel/directmessages/DirectMessages.tsx","components/sidepanel/starred/Starred.tsx","components/sidepanel/SidePanel.tsx","components/metapanel/MetaPanel.tsx","components/messages/progressbar/ProgressBar.tsx","components/messages/messageform/filemodal/FileModal.tsx","components/messages/messageform/MessageForm.tsx","components/messages/messagesheader/MessagesHeader.tsx","components/messages/message/Message.tsx","components/messages/Messages.tsx","store/actions/setUserPosts.tsx","components/App.tsx","components/auth/login/Login.tsx","components/auth/register/Register.tsx","components/ui/spinner/Spinner.tsx","store/reducers/user_reducer.tsx","store/reducers/channel_reducer.tsx","store/reducers/index.tsx","index.tsx","store/actions/setUser.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","ComponentType","React","Component","ColorPanel","state","modal","primary","secondary","user","props","currentUser","usersRef","firebase","database","ref","handleChangePrimary","color","setState","hex","handleChangeSecondary","handleSaveColors","saveColors","child","uid","push","update","then","console","log","catch","err","openModal","closeModal","this","Sidebar","as","Menu","inverted","vertical","visible","width","Divider","Button","icon","size","style","backgroundColor","onClick","Modal","basic","open","onClose","Header","Content","Segment","Label","content","onChange","Actions","Icon","name","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","UserPanel","dropdownOptions","key","text","displayName","disabled","handleSignout","auth","signOut","Grid","Column","Row","padding","margin","floated","Dropdown","trigger","Image","space","avatar","src","photoURL","options","connect","setCurrentChannel","channel","type","payload","currentChannel","setPrivateChannel","isPrivateChannel","Channels","id","channels","channelName","channelDetails","channelsRef","messagesRef","notifications","total","lastKnownTotal","count","isModalOpen","firstLoad","activeChannel","removeListeners","off","setFirstChannel","firstChannel","length","setActiveChannel","changeChannel","clearNotifications","index","findIndex","notification","updatedNotifications","addNotificationListener","channelId","on","snap","handleNotifications","currentChannelId","lastTotal","numChildren","getNotificationCount","forEach","displayChannels","map","Item","opacity","active","addChannel","newChannel","details","createdBy","error","handleSubmit","event","preventDefault","isFormValid","handleChange","currentTarget","value","addListenters","loadedChannels","val","Fragment","className","Form","onSubmit","Field","Input","fluid","label","DirectMessages","users","connectedRef","presenceRef","addListeners","currentUserUid","loadedUsers","set","onDisconnect","remove","addStatusToUser","userId","connected","updatedUsers","reduce","acc","concat","isUserOnline","status","channelData","getChannelId","currentUserId","fontStyle","Starred","starredChannels","starredChannel","channelToRemove","filteredChannels","filter","SidePanel","classes","slidePanelContainer","fixed","MetaPanel","activeIndex","privateChannel","userPosts","formatCount","num","displayTopPosters","posts","Object","entries","sort","a","b","i","List","Description","slice","setActiveIndex","titleProps","newIndex","loading","metaPanel","attached","Accordion","styled","Title","circular","ProgressBar","uploadState","percentUploaded","Progress","styles","progressBar","percent","progress","indicating","FileModal","file","authorized","addFile","files","sendFile","uploadFile","isAuthorized","contentType","mime","lookup","clearFile","filename","includes","MessageForm","storageRef","storage","uploadTask","message","errors","createMessage","fileUrl","timestamp","ServerValue","TIMESTAMP","image","sendMessage","getMessagesRef","getPath","metadata","pathToUpload","filePath","uuidv4","put","Math","round","bytesTransferred","totalBytes","snapshot","getDownloadURL","downloadUrl","sendFileMessage","messageForm","marginBottom","labelPosition","placeholder","some","Group","widths","MessagesHeader","numUniqueUsers","handleSearchChange","searchLoading","isChannelStarred","handleStar","clearing","Subheader","isOwnMessage","Message","Comment","Avatar","Author","Metadata","moment","fromNow","isImage","Text","Messages","privateMessagesRef","messages","messagesLoading","searchTerm","searchResults","addUserStarsListener","once","data","prevStarred","keys","addMessageListener","loadedMessages","countUniqueUsers","countUserPosts","prevState","starChannel","createBy","handleSearchMessages","channelMessages","regex","RegExp","setTimeout","uniqueUsers","plural","setUserPosts","displayMessages","displayChannelName","maxWidth","columns","marginLeft","Login","email","password","displayErrors","signInWithEmailAndPassword","signedInUser","credentials","handleInputError","inputName","toLowerCase","textAlign","verticalAlign","register","data-test","loginHeader","formContainer","to","Register","username","passwordConfirmation","createUserWithEmailAndPassword","createdUser","updateProfile","md5","saveUser","isFormEmpty","isPasswordValid","form","Spinner","Dimmer","Loader","initialUserState","isLoading","user_reducer","action","initialChannelState","channel_reducer","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunk","store","createStore","applyMiddleware","Root","onAuthStateChanged","setUser","history","clearUser","exact","path","component","App","RootWithAuth","withRouter","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f9c348b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Login_register__wvTPC\",\"formContainer\":\"Login_formContainer__3HE1b\",\"loginHeader\":\"Login_loginHeader__2NNDs\",\"uiMessage\":\"Login_uiMessage__lv14g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__2ETAL\",\"formContainer\":\"Register_formContainer__1IEIQ\",\"loginHeader\":\"Register_loginHeader__aDF43\",\"uiMessage\":\"Register_uiMessage__2wtzw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slidePanelContainer\":\"SidePanel_slidePanelContainer__FGWzq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"metaPanel\":\"MetaPanel_metaPanel__1_bR8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageForm\":\"MessageForm_messageForm__rfMWm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__3AdIW\",\"comment\":\"Messages_comment__2_ekb\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\n\nexport type FormEvent = React.FormEvent<HTMLFormElement>;\nexport type InputEvent = React.FormEvent<HTMLInputElement>;\n\n\n\nexport default class ComponentType<P = any, S = any> extends React.Component<P, S> {    \n\n}\n\n","import React from 'react';\nimport { Label, Sidebar, Menu, Divider, Button, Modal, Icon, Segment } from 'semantic-ui-react';\nimport { SliderPicker } from 'react-color';\nimport firebase from 'firebase';\nimport ComponentType from '../../ComponentType';\n\ninterface IProps {\n  currentUser: any,\n}\n\nclass ColorPanel extends ComponentType<IProps> {\n  state = {\n    modal: false,\n    primary: '',\n    secondary: '',\n    user: this.props.currentUser,\n    usersRef: firebase.database().ref('users'),\n  }\n\n  handleChangePrimary = (color: any) => this.setState({primary: color.hex});\n  handleChangeSecondary = (color: any) => this.setState({secondary: color.hex});\n\n  handleSaveColors = () => {\n    if(this.state.primary && this.state.secondary) {\n      this.saveColors(this.state.primary, this.state.secondary); \n    }\n  }\n  \n  saveColors = (primary:string, secondary:string) => {\n    this.state.usersRef\n      .child(`${this.state.user.uid}/colors`)\n      .push()\n      .update({\n        primary,\n        secondary\n      })\n      .then(() => {\n        console.log('Colors added');\n        // this.closeModal();\n      })\n      .catch( (err) => console.log(err));\n  } \n\n  openModal = () => this.setState({modal: true});\n\n  closeModal = () => this.setState({modal: false});\n\n    render() {\n        let {modal, primary, secondary} = this.state;\n\n        return (\n            <Sidebar\n              as={Menu}\n              // icon='label'\n              inverted\n              vertical\n              visible\n              width='very thin'\n            >\n              <Divider />\n            \n              <Button icon='add' size='small' style={{backgroundColor: '#00ada5'}} onClick={this.openModal} />\n              <Modal basic open={this.state.modal} onClose={this.closeModal}>\n                <Modal.Header>\n                  <Modal.Content>\n                    \n                      <Segment inverted onClick={this.handleSaveColors}>\n                        <Label content= 'Primary Color' />\n                        <SliderPicker color={primary} onChange={this.handleChangePrimary} />\n                      </Segment>\n                      <Segment inverted onClick={this.handleSaveColors}>\n                        <Label content='Secondary Color' />\n                        <SliderPicker color={secondary} onChange={this.handleChangeSecondary} />\n                      </Segment>\n\n                  </Modal.Content>\n                  \n                  <Modal.Actions>\n                    <Button color='green' inverted>\n                       <Icon name='checkmark' /> Apply Colors\n                    </Button>\n                    <Button color='red' onClick={this.closeModal} inverted>\n                       <Icon name='remove'  /> Cancel\n                    </Button>\n                  </Modal.Actions>\n                </Modal.Header>\n              </Modal>\n            </Sidebar>\n        )\n    }\n}\nexport default ColorPanel;","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';  \nimport 'firebase/storage';\n\nvar config = {\n    apiKey: \"AIzaSyAuyuNcunURGGkny2xJ0VDcXOc5k2kohcg\",\n    authDomain: \"slack-app-d47b6.firebaseapp.com\",\n    databaseURL: \"https://slack-app-d47b6.firebaseio.com\",\n    projectId: \"slack-app-d47b6\",\n    storageBucket: \"slack-app-d47b6.appspot.com\",\n    messagingSenderId: \"539859022252\"\n  };\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n\n// == SERVICE STORAGE ==\n\n// service firebase.storage {\n//   match /b/{bucket}/o {\n//     match /{allPaths=**} {\n//       allow read, write: if request.auth != null;\n//     }\n//   }\n// }","import React from \"react\";\nimport { Grid, Header, Icon, Dropdown, Image } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../firebase\";\n// import styles from \"./UserPanel.module.scss\";\nimport \"./UserPanel.scss\";\n\nexport interface Store extends React.Props<any> {\n  store?: any;\n}\n\ninterface Props {\n  currentUser: {\n    displayName: string;\n    photoURL: string;\n  };\n}\n\nclass UserPanel extends React.Component<Props> {\n  state = {\n    user: this.props.currentUser\n  };\n  componentDidMount() {\n    this.setState({ user: this.props.currentUser });\n\n  }\n\n  dropdownOptions = () => [\n    {\n      key: \"user\",\n      text: (\n        <span>\n          {\" \"}\n          Signed in as<strong>{this.props.currentUser.displayName}</strong>\n        </span>\n      ),\n      disabled: true\n    },\n    {\n      key: \"avatar\",\n      text: <span>Change Avatar</span>\n    },\n    {\n      key: \"signout\",\n      text: <span onClick={this.handleSignout}>Sign Out</span>\n    }\n  ];\n\n  handleSignout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => console.log(\"signed out!\"));\n  };\n  render() {\n    console.log(this.props.currentUser);\n    const { user } = this.state;\n    return (\n      <Grid>\n        <Grid.Column>\n          <Grid.Column>\n            <Grid.Row style={{ padding: \"1.2em\", margin: 0 }}>\n              {/* App Header */}\n              <Header inverted floated=\"left\" as=\"h2\">\n                <Icon name=\"code\" />\n                <Header.Content>DevChat</Header.Content>\n              </Header>\n              \n              {/* User Dropdown */}\n              <Header style={{ padding: \"0.25em\" }} as=\"h4\" inverted />\n              <Dropdown\n                trigger={\n                  <span style={{ color: \"white\" }}>\n                  <br />\n                    <Image space=\"right\" avatar src={user.photoURL}   />\n                    {this.state.user.displayName}\n                  </span>\n                }\n                options={this.dropdownOptions()}\n              />\n            </Grid.Row>\n          </Grid.Column>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any): any => ({\n  currentUser: state.user.currentUser\n});\n\nexport default connect(mapStateToProps)(UserPanel);\n\n// === LEFT OFF 3:34 ======\n","import * as actionTypes from './actionTypes';\n\n\nexport interface IChannel {\n    type:string,\n    payload:{currentChannel:{channel:object}}\n}\n\nexport const setCurrentChannel = (channel:any) => {\n    return {\n        type:actionTypes.SET_CURRENT_CHANNEL,\n        payload:{\n            currentChannel: channel\n        }\n    }\n}","export interface IActions {\n  type: string;\n}\n// USER TYPES\nexport const SET_USER = 'SET_USER';\n\nexport const CLEAR_USER = 'CLEAR_USER';\n\n// Channel TYPES\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\n// Private Channels CALLED in DirectMessages.tsx / changeChannel()\nexport const SET_PRIVATE_CHANNEL = 'SET_PRIVATE_CHANNEL';\n\nexport const SET_USER_POSTS = 'SET_USER_POSTS';","import * as actionTypes from './actionTypes';\n\nexport const setPrivateChannel = (isPrivateChannel: boolean) => {\n    return {\n        type: actionTypes.SET_PRIVATE_CHANNEL,\n        payload: {\n            isPrivateChannel\n        }\n    }\n}","import React from 'react'; \nimport { Menu, Icon, Modal, Input, Button, Label, Form } from 'semantic-ui-react';\nimport firebase from '../../../firebase';\n\nimport {setCurrentChannel, setPrivateChannel} from '../../../store/actions';\nimport {connect} from 'react-redux';\n\n\ntype InputEvent = React.FormEvent<HTMLInputElement>;\ntype FormEvent = React.FormEvent<HTMLFormElement>;\ntype User = {displayName:string, photoURL:string};\ntype Notification = {\n  id: number,\n  total: number,\n  lastKnownTotal: number,\n  count: number,\n}\n\nexport interface Channel {id:number, name:string};\n\nexport interface INewChannel {\n    id: string,\n    name: string,\n    details: string,\n    createdBy: {\n        name: string,\n        avatar: string\n    }\n}\n\ninterface IState {\n        user:User,\n        channel:Channel,\n        channels: any,\n        channelName: string,\n        channelDetails: string,\n        isModalOpen: boolean,\n        channelsRef: any,\n        messagesRef: any,\n        notifications:[Notification],\n        firstLoad: boolean,\n        activeChannel: string\n}\n\ninterface IProps {\n    currentUser:User,\n    changeChannel?:(channel:object) => void,\n    setCurrentChannel?:any,\n    setActiveChannel?:() => void,\n    setPrivateChannel?:any,\n}\n\nclass Channels extends React.Component<IProps> {\n    state:IState = {\n        user: this.props.currentUser,\n        channel: {id:0, name: ''},\n        channels: [], // ?????????? ---- COULD CAUSE PROBLEMS IN CHANNEL SWITCHING //\n        channelName: '',\n        channelDetails: '',\n        channelsRef: firebase.database().ref('channels'),\n        messagesRef: firebase.database().ref('messages'),\n        notifications: [{id: 0, total: 0, lastKnownTotal: 0, count: 0}],\n        isModalOpen:false,\n        firstLoad: true,\n        activeChannel: '',\n    }\n    componentWillMount() {\n        this.addListenters();\n        console.log(\"CHANNELS -> State channels: \", this.state.channels);\n    }\n\n    componentWillUnmount() {\n        this.removeListeners();\n    }\n\n    addListenters() {\n        let loadedChannels:Array<object> = [];  \n        this.state.channelsRef.on('child_added', (snap:{val:()=>object, key:number}) =>{\n            loadedChannels.push( snap.val() );\n            this.setState({channels: loadedChannels}, () => this.setFirstChannel());\n            this.addNotificationListener(snap.key);\n        });\n    }\n\n    removeListeners = ():void => {\n        this.state.channelsRef.off();\n    }\n///////////////////////////\n    setFirstChannel = () => {\n        const firstChannel = this.state.channels[0];\n        if(this.state.firstLoad && this.state.channels.length > 0) {\n            this.props.setCurrentChannel(firstChannel);\n            this.setActiveChannel(firstChannel) ;\n        }\n        this.setState({firstLoad: false});\n    }\n//////////////////////////////\n    changeChannel = (channel:Channel) => {\n        this.props.setCurrentChannel(channel);\n        this.clearNotifications();\n        this.setActiveChannel(channel);\n        this.props.setPrivateChannel(false);\n        this.setState({ channel });\n    }\n\n    clearNotifications = () => {\n      \n      let index = this.state.notifications.findIndex((notification:{id:number}) => notification.id ===\n        this.state.channel.id);\n      \n        if(index !== -1) {\n          let updatedNotifications = [...this.state.notifications];\n          updatedNotifications[index].total = this.state.notifications[index].lastKnownTotal;\n          updatedNotifications[index].count = 0;\n          this.setState({ notifications: updatedNotifications});\n        }\n    }\n\n    addNotificationListener = (channelId:number) => {\n      this.state.messagesRef.child(channelId).on('value', (snap:any) => {\n        if(this.state.channel) {\n          this.handleNotifications(channelId, this.state.channel.id, this.state.notifications,snap)\n        }\n      })\n    }  \n    \n    handleNotifications = (channelId: number, currentChannelId: any, notifications:any, snap:any) => {\n      let lastTotal = 0;\n\n      let index = notifications.findIndex((notification:{id:number}) => notification.id === channelId);\n    \n      if(index !== -1) {\n        if(channelId !== currentChannelId) {\n          lastTotal = notifications[index].total;\n          if(snap.numChildren() - lastTotal > 0) {\n            notifications[index].count = snap.numChildren() - lastTotal;\n          }\n        }\n        notifications[index].lastKnownTotal = snap.numChildren();\n      } else {\n        notifications.push({\n          id: channelId,\n          total: snap.numChildren(),\n          lastKnownTotal:snap.numChildren(),\n          count: 0\n        });\n      }\n      this.setState({notifications});\n    } \n\n   setActiveChannel = (channel:Channel) =>  this.setState({activeChannel: channel.id})\n\n   getNotificationCount = (channel:Channel) => {\n     let count = 0;\n\n     this.state.notifications.forEach((notification:{id:number, count:number}) => {\n       if(notification.id === channel.id) {\n         count = notification.count;\n       }\n     });\n     if(count > 0) return count;\n   }\n\n    displayChannels = (channels:[object]) => (\n        channels.length > 0 && channels.map( (channel:any) => (\n            <Menu.Item\n                key={channel.id+channel.name}\n                onClick={() => this.changeChannel(channel)}\n                name={channel.name}\n                style={{opacity:0.95}}\n                active={channel.id === this.state.activeChannel}\n            >\n              {this.getNotificationCount(channel) && \n               (<Label color='red'>{this.getNotificationCount(channel)}</Label>)}\n                # {channel.name}\n\n            </Menu.Item>\n        ))\n    )\n    /*Add */\n    addChannel = () => {\n        const {channelsRef, channelName, channelDetails, user} = this.state;\n        // console.log('CHANNELREF.KEY: ', channelsRef.key);\n        console.log('Firebase Database Ref: ', channelsRef);\n        const key = channelsRef.push().key;\n        // console.log('CONSOLE LOG KEY: ', key);\n        console.log('USERNAME: ', user);\n        const newChannel = {\n            id:key,\n            name:channelName,\n            details: channelDetails,\n            createdBy: {\n                name: user.displayName,\n                avatar: user.photoURL\n            }\n        }\n        channelsRef\n            .child(key)\n            .update(newChannel)\n            .then(() => {\n                this.setState({channelName: '', channelDetails: ''});\n                this.closeModal();\n                console.log('channel added');\n            })\n            .catch( (error:Error) => {\n                console.log('Catched Error:', error);\n            })\n    }\n\n    handleSubmit = (event:FormEvent) => {\n        event.preventDefault();\n        if(this.isFormValid(this.state)) {\n            this.addChannel();\n            console.log('channel added');\n        }\n    }\n    openModal = () => this.setState({ isModalOpen: true });\n\n    closeModal = () => this.setState({isModalOpen: false});\n    \n    handleChange = (event:InputEvent) => {\n        this.setState({ [event.currentTarget.name]: event.currentTarget.value})\n    }\n\n    isFormValid = ({channelName, channelDetails}:IState) => channelName && channelDetails;\n    render() {\n\n        let {channels, isModalOpen} = this.state;\n        return (\n        <React.Fragment>\n        <Menu.Menu className=\"menu\">\n          <Menu.Item>\n            <span>\n              <Icon name=\"exchange\" /> CHANNELS\n            </span>{\" \"}\n            ({channels.length}) <Icon name=\"add\" onClick={this.openModal} />\n          </Menu.Item>\n          {this.displayChannels(channels)}\n        </Menu.Menu>\n\n        {/* Add Channel Modal */}\n        <Modal basic open={isModalOpen} onClose={this.closeModal}>\n          <Modal.Header>Add a Channel</Modal.Header>\n          <Modal.Content>\n            <Form onSubmit={this.handleSubmit}>\n              <Form.Field>\n                <Input\n                  fluid\n                  label=\"Name of Channel\"\n                  name=\"channelName\"\n                  onChange={this.handleChange}\n                />\n              </Form.Field>\n\n              <Form.Field>\n                <Input\n                  fluid\n                  label=\"About the Channel\"\n                  name=\"channelDetails\"\n                  onChange={this.handleChange}\n                />\n              </Form.Field>\n            </Form>\n          </Modal.Content>\n\n          <Modal.Actions>\n            <Button color=\"green\" inverted onClick={this.handleSubmit}>\n              <Icon name=\"checkmark\" /> Add\n            </Button>\n            <Button color=\"red\" inverted onClick={this.closeModal}>\n              <Icon name=\"remove\" /> Cancel\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </React.Fragment>\n        )\n    }\n}\n\n\nexport default connect<any, any>(\n    null,\n    { setCurrentChannel, setPrivateChannel }\n  )(Channels);\n  \n","import React from 'react';\nimport firebase from '../../../firebase';\nimport {Menu, Icon} from 'semantic-ui-react';\nimport ComponentType from '../../../ComponentType';\nimport {connect} from 'react-redux';\nimport {setCurrentChannel, setPrivateChannel} from '../../../store/actions';\nimport { any } from 'prop-types';\n\ntype UserType = {status: string, name: string, uid: string };\n\ninterface IProps {\n    currentUser:UserType,\n    setCurrentChannel?:any,\n    setPrivateChannel?:any,\n}\n\nclass DirectMessages extends ComponentType<IProps> {\n\n    state = {\n        activeChannel: '',\n        user: this.props.currentUser,\n        users: [], \n        usersRef: firebase.database().ref('users'),\n        connectedRef: firebase.database().ref('.info/connected'),\n        presenceRef: firebase.database().ref('presence')\n    }\n\n    componentDidMount() {\n        if(this.state.user) {\n            this.addListeners(this.state.user.uid);\n        }\n    }\n\n    addListeners = (currentUserUid:string) => {\n        let loadedUsers: Array<object> = [];\n        this.state.usersRef.on('child_added', (snap:any ) => {\n            if(currentUserUid !== snap.key) {\n                let user = snap.val();\n                user['uid'] = snap.key;\n                user['status'] = 'offline';\n                loadedUsers.push(user);\n                this.setState({users: loadedUsers});\n            }\n        })\n\n        this.state.connectedRef.on('value', snap => {\n            if(snap.val() === true) {\n                const ref = this.state.presenceRef.child(currentUserUid);\n                ref.set(true);\n                ref.onDisconnect().remove((err) => {\n\n                })\n            }\n        })\n\n        this.state.presenceRef.on('child_added', (snap: any) => {\n            if(currentUserUid !== snap.key) {\n                this.addStatusToUser(snap.key);\n            }\n        });\n        this.state.presenceRef.on('child_removed', (snap: any) => {\n            if(currentUserUid !== snap.key) {\n                this.addStatusToUser(snap.key, false);\n            }\n        });\n    }\n\n    addStatusToUser = ( userId: string, connected = true) => {\n        const updatedUsers = this.state.users.reduce((acc:any, user:{uid: string, status: string}) => {\n            if(user.uid === userId) {\n                user['status'] = `${connected ? 'online' : 'offline'}`;\n            }\n            return acc.concat(user);\n        }, []);\n        this.setState({users: updatedUsers});\n    }\n\n    isUserOnline = (user:UserType) => user.status === 'online'\n    \n    // Each user is still considered a channel, so here we use user id for reference to change channels\n    changeChannel = (user:UserType) => {\n        const channelId = this.getChannelId(user.uid);\n        const channelData = {\n            id: channelId,\n            name: user.name\n        }\n        this.props.setCurrentChannel(channelData);\n        this.props.setPrivateChannel(true);\n        this.setActiveChannel(user.uid);\n    }\n\n    getChannelId = (userId:string) => {\n        const currentUserId = this.state.user.uid;\n        return userId < currentUserId ?\n         `${userId}/${currentUserId}` : `${currentUserId}/${userId}`;\n    }\n\n    setActiveChannel = (userId: string) => {\n        this.setState({ activeChannel: userId });\n    }\n\n    render() {\n        const { users, activeChannel } = this.state;\n        return (\n            <Menu.Menu className='menu'>\n                <Menu.Item>\n                    <span>\n                        <Icon name='mail' /> DIRECT MESSAGES\n                    </span>{' '}\n                    ({ users.length })\n                </Menu.Item>\n                {/* Users to send Direct Messages */}\n                {users.map((user:UserType) => (\n                    <Menu.Item\n                        key={user.uid}\n                        active={user.uid === activeChannel}\n                        onClick={() => this.changeChannel(user)}\n                        style={{opacity: 0.95, fontStyle: 'italic'}}\n                    >\n                        <Icon \n                            name=\"circle\"\n                            color={this.isUserOnline(user) ? 'green' : 'red'}\n                        />\n                        @ {user.name}    \n                        </Menu.Item>\n                ))}\n            </Menu.Menu>\n        )\n    }\n}\nexport default connect<any, any>(null, {setCurrentChannel, setPrivateChannel})(DirectMessages);","import React from \"react\";\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport { IChannel } from \"../../App\";\nimport { setPrivateChannel, setCurrentChannel } from \"../../../store/actions\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../firebase\";\nimport ComponentType from '../../../ComponentType';\n\ninterface IProps {\n  setCurrentChannel: (channel: object) => any,\n  setPrivateChannel: (isPrivate: boolean) => any,\n  currentUser: any,\n}\n\nclass Starred extends ComponentType<IProps> {\n\n  state = {\n    starredChannels: [],\n    activeChannel: {},\n    openModal: false,\n    usersRef: firebase.database().ref('users'),\n    user: this.props.currentUser,\n  }\n\n  componentDidMount() {\n    if(this.state.user) {\n      this.addListeners(this.state.user.uid);\n    }    \n  }\n  \n  addListeners = (userId: string) => {\n    // usersRef\n    // .child(userId)\n    // .child('starred')\n    // .on('child_added', (snap: any) => {\n    //     const starredChannel = {id: snap.key, ...snap.val() };\n    //     setStarred([...starredChannels, starredChannel])\n    // });\n  \n    this.state.usersRef\n      .child(userId)\n      .child('starred')\n      .on('child_added', (snap: any) => {\n        const starredChannel = {id: snap.key, ...snap.val()};\n        this.setState({\n          starredChannels: [...this.state.starredChannels, starredChannel]});\n      });\n  \n      this.state.usersRef\n      .child(userId)\n      .child('starred')\n      .on('child_removed', (snap:any) => {\n          const channelToRemove = { id: snap.key, ...snap.val() };\n          const filteredChannels = this.state.starredChannels.filter( (channel:any) => {\n            return channel.id !== channelToRemove.id;\n          });\n          this.setState({ starredChannels: filteredChannels});\n      })\n  }\n\n  setActiveChannel = (channel: IChannel) => this.setState({activeChannel: channel.id});\n\n  changeChannel = (channel: IChannel) => {\n    this.props.setCurrentChannel(channel);\n    this.setActiveChannel(channel);\n    this.props.setPrivateChannel(true);\n  };\n\n  displayChannels = (channels: Array<any>) => {\n    let newChannels =\n      channels.length > 0 &&\n      channels.map((channel: any) => (\n        <Menu.Item\n          key={channel.id + channel.name}\n          onClick={() => this.changeChannel(channel)}\n          name={channel.name}\n          style={{ opacity: 0.95 }}\n          active={channel.id === this.state.activeChannel}\n        >\n          # {channel.name}\n        </Menu.Item>\n      ));\n    return newChannels;\n  };\n\n  render() {\n\n    const {starredChannels} = this.state;\n\n    return (\n      <>\n        <Menu.Menu className=\"menu\">\n          <Menu.Item>\n            <span>\n              <Icon name=\"star\" /> STARRED\n            </span>{\" \"}\n            ({starredChannels.length}) <Icon name=\"add\" onClick={this.state.openModal} />\n          </Menu.Item>\n          {this.displayChannels(starredChannels)}\n        </Menu.Menu>\n      </>\n    );\n  }\n};\n\nexport default connect(null, { setCurrentChannel, setPrivateChannel })(Starred);\n\n","import React from 'react';\nimport ComponentType from '../../ComponentType';\nimport { Menu } from 'semantic-ui-react';\nimport UserPanel from './userpanel/UserPanel';\nimport Channels from './channels/Channels';\nimport DirectMessages from './directmessages/DirectMessages';\nimport Starred from './starred/Starred';\nimport classes from './SidePanel.module.scss';\n\nclass SidePanel extends ComponentType {\n    render() {\n        const { currentUser } = this.props;\n\n        return (\n            <Menu\n                id={classes.slidePanelContainer}\n                size=\"large\"\n                inverted\n                fixed=\"left\"\n                vertical\n            >   \n                <UserPanel currentUser={currentUser} />\n                <Starred currentUser={currentUser} />\n                <Channels currentUser={currentUser} />\n                <DirectMessages currentUser={currentUser} />\n            </Menu>\n        )\n    }\n}\nexport default SidePanel;","import React from 'react';\nimport ComponentType from '../../ComponentType';\nimport { Segment, Header, Accordion, Icon, Image, List } from 'semantic-ui-react';\nimport classes from './MetaPanel.module.scss';\n\ninterface IProps {\n    isPrivateChannel: boolean,\n    currentChannel: any, \n    userPosts: any,\n}\n\nclass MetaPanel extends ComponentType<IProps> {\n    state = {\n        activeIndex: 0,\n        privateChannel: this.props.isPrivateChannel,\n        currentChannel: this.props.currentChannel,\n        userPosts: this.props.userPosts,\n    }\n\n    componentDidMount() {\n        console.log('private Channel boolean in componentDidMount: ', this.state.privateChannel);\n        console.log('current Channel object in componentDidMount: ', this.state.currentChannel);\n    }\n\n    formatCount = (num: any) => (num > 1 || num === 0 ? `${num} posts` : `${num} post`);\n\n    displayTopPosters = (posts: any) =>\n        Object.entries(posts)\n              .sort((a:any, b:any) => b[1] - a[1])\n              .map(([key, val]:any, i) => (\n                <List.Item key={i}>\n                    <Image avatar src={val.avatar} />\n                    <List.Content>\n                        <List.Header as ='a'>{key}</List.Header>\n                        <List.Description>{this.formatCount(val.count)} posts</List.Description>\n                    </List.Content>\n                </List.Item>\n              ))\n              .slice(0, 5);\n\n    setActiveIndex = (event: any, titleProps:{index:number}) => {\n        const { index } = titleProps;\n        const { activeIndex } = this.state;\n        \n        const newIndex = activeIndex === index ? -1 : index;\n        this.setState({ activeIndex: newIndex })\n    }\n\n    render() {\n        let {activeIndex, privateChannel, currentChannel} = this.state;\n        const { userPosts } = this.props;\n\n        if(privateChannel=== true) { \n            return null;\n        }\n\n        return (\n            <Segment loading={!currentChannel} id={classes.metaPanel} >\n                <Header as='h3' attached='top'>\n                    About\n                    <span> #{currentChannel && currentChannel.name}</span>\n                </Header>\n                <Accordion styled attached='true'>\n                    <Accordion.Title\n                        active={activeIndex === 0}\n                        index={0}\n                        onClick={this.setActiveIndex}>\n                            <Icon name='dropdown' color='black' />\n                            <Icon name='info' color='black' />\n                            Channel Details\n                    </Accordion.Title>\n                    <Accordion.Content active={activeIndex === 0}>\n                        {currentChannel && currentChannel.details}\n                    </Accordion.Content>\n\n                    <Accordion.Title\n                        active={activeIndex === 1}\n                        index={1}\n                        onClick={this.setActiveIndex}>\n                            <Icon name='dropdown' color='black' />\n                            <Icon name='user circle' color='black' />\n                            Top Posters\n                    </Accordion.Title>\n                    <Accordion.Content active={activeIndex === 1}>\n                        <List>\n                            {userPosts && this.displayTopPosters(userPosts)}\n                            {console.log('users post: ', userPosts)} \n                        </List>\n                    </Accordion.Content>\n\n                    <Accordion.Title\n                        active={activeIndex === 2}\n                        index={2}\n                        onClick={this.setActiveIndex}>\n                            <Icon name='dropdown' color='black' />\n                            <Icon name='pencil alternate' color='black' />\n                            Created By \n                    </Accordion.Title>\n                    <Accordion.Content active={activeIndex === 2}>\n                        <Header as='h3'>\n                            <Image circular src={currentChannel && currentChannel.createdBy.avatar} />\n                            {currentChannel && currentChannel.createdBy.name}\n                        </Header>\n                    </Accordion.Content>\n                </Accordion>\n            </Segment>\n        )};\n}\n\nexport default MetaPanel;","import React from 'react';\nimport { Progress } from 'semantic-ui-react';\nimport styles from './ProgressBar.module.scss';\n\ninterface IProps {\n    uploadState:string,\n    percentUploaded:number,\n}\n\nconst ProgressBar = ({uploadState, percentUploaded}:IProps) =>\n    uploadState === 'uploading' ?  <Progress\n                        className={styles.progressBar}\n                        percent={percentUploaded}\n                        progress    \n                        indicating\n                        size='medium'\n                        inverted />\n                    :\n                   <> </>;\n\n\nexport default ProgressBar;","import React from 'react';\nimport { Modal, Input, Icon, Button } from 'semantic-ui-react'; \nimport ComponentType from '../../../../ComponentType';\nimport {InputEvent} from '../../../../ComponentType';\nimport mime from 'mime-types';\n\n\nclass FileModal extends ComponentType {\n    state:any = {\n        file: null,\n        authorized: ['image/jpeg', 'image/png'],\n    }\n\n    addFile = (event:InputEvent) => {\n        // event.currentTarget.files[0] was giving a 'possibly null error' where the \n        // type was identified as 'FILE | null'.So below(line22 setState({file: files[0]})), where \n        // checked if file is null I set state.file to be the index 0, file[0]\n        const files = event.currentTarget.files;\n        \n        if(files != null) {\n            this.setState({file: files[0]});\n            console.log(\"FileModal -> State FILES: \", files);\n        }\n\n    };\n    sendFile = () => {\n        const {file} = this.state;\n        const {uploadFile, closeModal} = this.props;\n\n        if(file !== null) {\n            if(this.isAuthorized(file.name)) {\n                // send file\n                const metadata = { contentType: mime.lookup(file.name) };\n                uploadFile(file, metadata);\n                closeModal();\n                this.clearFile();\n            }\n        }\n    }\n\n    // lookup = () => {\n        \n    //    let result = mime.lookup(filename); \n    //    results === true ? 'true' : '';\n    // }\n    //                                        includes takes in any returns boolean\n    //                                         mime  takes in string returns false\n    \n    // Check to see if file is an authorized type to be uploaded, using state.authorized\n    isAuthorized = (filename:any) => this.state.authorized.includes(mime.lookup(filename));\n    \n    clearFile = () => this.setState({file: null});\n\n\n    render() {\n        const {modal, closeModal} = this.props;\n        return ( \n                    <Modal basic open={modal} onClose={closeModal}>\n                        <Modal.Header>Select an Image Files</Modal.Header>\n                        <Modal.Content>\n                            <Input\n                                onChange={this.addFile}\n                                fluid\n                                label='File types: jpg, png'\n                                name='file'\n                                type='file'\n                            />\n                        </Modal.Content>\n                        <Modal.Actions>\n                            <Button\n                                color='green'\n                                inverted\n                                onClick={this.sendFile}\n                            >\n                                <Icon name='checkmark' /> Send\n                            </Button>\n                            <Button\n                                color='red'\n                                inverted\n                                onClick={closeModal}\n                            > \n                                <Icon name='remove' /> Cancel\n                            </Button>\n                        </Modal.Actions>\n                    </Modal>\n                );\n            }\n}\nexport default FileModal;","import React from 'react';\nimport uuidv4 from 'uuid/v4';\nimport firebase from '../../../firebase';\nimport {Segment, Button, Input} from 'semantic-ui-react';\nimport ComponentType from '../../../ComponentType';\nimport ProgressBar from '../progressbar/ProgressBar';\nimport styles from './MessageForm.module.scss';\nimport FileModal from './filemodal/FileModal';\n\n/**\n * FormEvent for Submiting the form\n * InputEven for Event.target properties such as currentTarget.value & name\n */\ntype FormEvent = React.FormEvent<HTMLFormElement>;\ntype InputEvent = React.FormEvent<HTMLInputElement>;\n\n// interface IState {\n//     message:string,\n//     channel:object,\n//     user:object,\n//     loading:boolean,\n//     errors:[ConcatArray<ErrorConstructor>, {message:}]\n// }\ninterface IState {\n        storageRef:any,\n        uploadTask: any,\n        uploadState: string,\n        percentUploaded: number,\n        message: string,\n        channel: {id: number},\n        user: {\n               uid: any,\n               displayName: string,\n               photoURL: string\n            },\n        loading: boolean,\n        errors: [{message: string}],\n        modal: boolean,\n}\n\n\ninterface IProps {\n    currentChannel: {id: number},\n    currentUser: {  \n                    uid: any,\n                    displayName: string,\n                    photoURL: string\n                },\n    messagesRef: any,\n    isPrivateChannel: boolean,\n    getMessagesRef: any,\n}\n\nclass MessageForm extends ComponentType<IProps> {\n    state:IState = {\n        storageRef: firebase.storage().ref(),\n        uploadTask: null,\n        uploadState: '',\n        percentUploaded: 0,\n        message: '',\n        channel: this.props.currentChannel,\n        user: this.props.currentUser,\n        loading: false,\n        errors: [{message: ''}],\n        modal: false,\n    }\n\n    openModal = () => this.setState({modal: true});\n\n    closeModal = () => this.setState({modal: false});\n\n    handleChange = (event:InputEvent) => {\n        this.setState({[event.currentTarget.name]: event.currentTarget.value});\n    }\n    /**\n     * Creates a message object with timestamp, user, & content properties\n     * @function createMessage\n     * @returns {message:object}\n     */\n    createMessage = (fileUrl?:string):object => {\n        let message: {\n            timestamp:object,\n            user: {\n                id: number,\n                name: string,\n                avatar: string,\n            },\n            image: string,\n            content: string,\n        } \n            message = {\n            timestamp: firebase.database.ServerValue.TIMESTAMP,\n            user: {\n                id: this.state.user.uid,\n                name: this.state.user.displayName,\n                avatar: this.state.user.photoURL\n            },\n            image: '',\n            content: ''\n        };\n\n        if(fileUrl !== null && fileUrl) {  //   ???? CHECKING FOR 'N U L L' ????\n            message['image'] = fileUrl;\n        } else {\n            message['content'] = this.state.message;\n        }\n\n        return message;\n    }\n    /**\n     * If there's a message then set the firebase messagesRef properties and state.loading to true\n     * @function sendMessage\n     * @param {undefined}\n     * @returns {void}\n     */\n    sendMessage = (): void => {\n        const { getMessagesRef } = this.props;\n        const { message, channel } = this.state;\n\n        if(message) {\n            this.setState({loading: true});\n            getMessagesRef()\n                .child(channel.id)\n                .push()\n                .set(this.createMessage())\n                .then(() => {\n                    this.setState({loading:false, message: '', errors:[] })\n                })\n                .catch( (err:ConcatArray<{message:string}>) => {\n                    console.error(err);\n                    this.setState({\n                        loading: false,\n                        errors: this.state.errors.concat(err)\n                    })\n                })\n        }        \n        else {\n            this.setState({\n                errors: this.state.errors.concat({ message: 'Add a message' })\n            })\n        }\n    }\n\n    getPath = () => {\n        if(this.props.isPrivateChannel) {\n            return `chat/private-${this.state.channel.id}`;\n        } else {\n            return 'chat/public';\n        }\n    }\n\n    uploadFile = (file:any, metadata:any) => {\n        const pathToUpload = this.state.channel.id;\n        const ref = this.props.messagesRef();\n        //UUID creates random strings for pictures such as seen in social media imgs\n        const filePath = `${this.getPath()}/${uuidv4()}.jpg`;\n        \n        this.setState({\n            uploadState: 'uploading',\n            uploadTask: this.state.storageRef.child(filePath).put(file, metadata)\n\n        },  () => {\n            this.state.uploadTask.on('state_changed', (snap:any) => {\n                const percentUploaded = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\n                this.setState({percentUploaded});\n            },\n                (err:Error) => {\n                    console.log(err);\n                    this.setState({\n                        errors: this.state.errors.concat(err),\n                        uploadState: 'error',\n                        uploadTask: null,\n                    })\n                },\n                () => {\n                    this.state.uploadTask.snapshot.ref.getDownloadURL().then((downloadUrl:string) => {\n                        this.sendFileMessage(downloadUrl, ref, pathToUpload);\n                    })\n                    .catch((err:Error)  => {\n                        console.log(err);\n                        this.setState({\n                            errors: this.state.errors.concat(err),\n                            uploadState: 'error',\n                            uploadTask: null,\n                        })\n                    })\n                }\n            )\n        });\n\n    }//=>END OF uploadFile\n\n    sendFileMessage = (fileUrl:string, ref:any, pathToUpload:number) => {\n        ref.child(pathToUpload)   \n           .push()\n           .set(this.createMessage(fileUrl))\n           .then(() => {\n               this.setState({uploadState: 'done'})\n           })\n           .catch((err:Error) => {\n            console.error(err);\n            this.setState({\n                errors: this.state.errors.concat(err)  \n            })\n           })\n    }\n\n    render() {\n  \n        const {errors, message, modal, loading, uploadState, percentUploaded} = this.state;\n\n        return (\n\n            <Segment\n             className={styles.messageForm}\n            >\n                <Input \n                    fluid\n                    name='message'\n                    onChange={this.handleChange}\n                    value={message}\n                    style={{marginBottom: '0.7em'}}\n                    label={<Button icon={'add'} />}\n                    labelPosition='left'\n                    placeholder='Write your message'\n                    className={\n                        errors.some(error => error.message.includes('message')) \n                        ? 'error' \n                        : ''\n                    }\n                    />\n\n            <Button.Group icon widths='1'>\n                <Button\n                    onClick={this.sendMessage}\n                    disabled={loading}\n                    color='orange'\n                    content='Add Replay'\n                    labelPosition='left'\n                    icon='edit'\n                />\n                <Button\n                    color='teal'\n                    disabled={uploadState === 'uploading'}\n                    onClick={this.openModal}\n                    content='Upload Media'\n                    labelPosition='right'\n                    icon='cloud upload'\n                    />\n\n            </Button.Group>        \n                <FileModal\n                    modal={modal}\n                    closeModal={this.closeModal}\n                    uploadFile={this.uploadFile}\n                    />\n                <ProgressBar\n                    uploadState={uploadState} \n                    percentUploaded={percentUploaded}\n                />\n            </Segment>\n\n        )\n    }\n}\n\nexport default MessageForm;","import React from 'react';\nimport {Header, Segment, Input, Icon} from 'semantic-ui-react';\nimport ComponentType, {InputEvent, FormEvent} from '../../../ComponentType';\n\n\ninterface IProps {\n    channelName: string,\n    numUniqueUsers: number,\n    handleSearchChange:(event:any) => void,\n    searchLoading: boolean,\n    isPrivateChannel: boolean,\n    isChannelStarred: boolean,\n    handleStar: () => any,\n}\n\nclass MessagesHeader extends ComponentType<IProps> {\n\n    render() {\n        const {channelName, numUniqueUsers, handleSearchChange, \n            searchLoading, isPrivateChannel, isChannelStarred,\n            handleStar} = this.props;\n        return (\n            <Segment clearing>\n                {/* Channel Title */}\n                <Header fluid='true' as='h2' floated='left' style={{ marginBottom: 0 }}>\n                    <span>\n                       {channelName}\n                       {!isPrivateChannel && (\n                       <Icon \n                            onClick={handleStar} \n                            name={isChannelStarred ? 'star' : 'star outline'} \n                            color={ isChannelStarred ? 'yellow' : 'black'} \n                        />)}\n                    </span>\n                    \n                    <Header.Subheader>{numUniqueUsers}</Header.Subheader>\n                </Header>\n\n                {/* Channel Search Input */}\n                <Header>\n                <Input\n                    loading={searchLoading}\n                    onChange={handleSearchChange}\n                    size=\"mini\"\n                    icon=\"search\"\n                    name=\"searchTerm\"\n                    placeholder=\"Search Messages\"\n                />\n\n                </Header>\n            </Segment>\n        );\n    }\n}\n\nexport default MessagesHeader;","import React from 'react';\nimport moment from 'moment';\nimport { Comment, Image } from 'semantic-ui-react';\n\ntype messageType = {timestamp:number};\n\ninterface IState {\n    key:number, \n    message:messageType,\n    user: object\n}\n\nconst isOwnMessage = (message:any, user:any) => \n    message.user.id === user.uid ? 'message__self' : '';\n\nconst isImage = (message:any) => \n    message.image !== '' && message.content === '';\n\n\nconst timeFromNow = (timestamp:number) => moment(timestamp).fromNow();\n\nconst Message = ({message, user}:any) => (\n        <>\n        <Comment>\n            <Comment.Avatar src={message.user.avatar} />\n            <Comment.Content className={isOwnMessage(message, user)}>\n                <Comment.Author as='a'>{message.user.name}</Comment.Author>\n                <Comment.Metadata>{timeFromNow(message.timestamp)}</Comment.Metadata>\n               \n                {isImage(message) ?\n                     <Image src={message.image} className=\"message__image\" />\n                    : \n                     <Comment.Text>{message.content}</Comment.Text>    \n            }\n            </Comment.Content>\n        </Comment>\n        </>\n    );\nexport default Message;\n ","import React from 'react';\nimport { Segment, Comment } from 'semantic-ui-react';\nimport MessageForm from './messageform/MessageForm'; \nimport MessagesHeader from './messagesheader/MessagesHeader';\nimport ComponentType from '../../ComponentType'; \nimport Message from './message/Message';\nimport styles from './Messages.module.scss';\nimport firebase from '../../firebase'; \nimport {InputEvent} from '../../ComponentType';\nimport { connect } from 'react-redux';\nimport { setUserPosts } from '../../store/actions/index';\n\ninterface IProps {\n    key: any,\n    currentChannel: object,\n    currentUser: object,\n    isPrivateChannel: boolean,\n    handleStar?: () => void,\n    starChannel?: () => void,\n    addUserStarsListener?: () => void,\n    setUserPosts?: any,\n}\n\ninterface IState {\n    privateChannel: boolean,\n    privateMessagesRef: any,\n    messagesRef: any,\n    messages: [],\n    messagesLoading: boolean,\n    channel: object,\n    user: object,\n    userRef: object,\n    numUniqueUsers: string,\n    searchTerm: string,\n    searchLoading: boolean,\n    searchResults: [],\n    isChannelStarred: boolean\n}\n\nclass Messages extends ComponentType<IProps> {\n    state:any = {\n        privateChannel: this.props.isPrivateChannel,\n        privateMessagesRef: firebase.database().ref(\"privateMessages\"),\n        messagesRef: firebase.database().ref('messages'),\n        messages: [],\n        messagesLoading: true,\n        channel: this.props.currentChannel,\n        user: this.props.currentUser,\n        usersRef: firebase.database().ref('users'),\n        numUniqueUsers: '',\n        searchTerm: '',\n        searchLoading: false,\n        searchResults: [],\n        isChannelStarred: false,\n    }\n\n    componentDidMount() {\n\n       const { channel, user } = this.state;\n\n       if(channel && user) {\n            this.addListeners(channel.id);\n            this.addUserStarsListener(channel.id, user.uid);\n       }\n    }\n\n    addUserStarsListener = (channelId: string, userId: number) => {\n        this.state.usersRef\n            .child(userId)\n            .child('starred')\n            .once('value')\n            .then((data: {val:()=>any}) => {\n                 if(data.val() !== null) {\n                    const channelIds = Object.keys(data.val());\n                    const prevStarred = channelIds.includes(channelId);\n                    this.setState({ isChannelStarred: prevStarred});\n                 }\n            }) \n    }\n     \n    addListeners = (channelId:any) => {\n        this.addMessageListener(channelId);\n        return channelId;\n    }\n    /**\n     * Pull data from messagesRef snap values in to loadedmessages\n     * Set loadedMessages into state messages[] and set loading to false\n     * @param {channelID:string} \n     * @return {void}\n     */\n    addMessageListener = (channelId: any):void => {\n        let loadedMessages:Array<any> = [];\n        const ref = this.getMessagesRef();\n        ref.child(channelId).on(\"child_added\", (snap:any) => {\n          loadedMessages.push(snap.val());\n          this.setState({\n            messages: loadedMessages,\n            messagesLoading: false\n          });\n          this.countUniqueUsers(loadedMessages);\n          this.countUserPosts(loadedMessages);\n        });\n      };\n\n    getMessagesRef = () => {\n        const { messagesRef, privateMessagesRef, privateChannel } = this.state;\n        return privateChannel ? privateMessagesRef : messagesRef;\n      };\n\n    handleStar = () => {\n        this.setState((prevState:{isChannelStarred: boolean}) => ({\n            isChannelStarred: !prevState.isChannelStarred\n        }), () => this.starChannel());\n    }\n\n    starChannel = () => {\n        if(this.state.isChannelStarred) {\n            this.state.usersRef\n                .child(`${this.state.user.uid}/starred`) //UsersRef object has a child which is like a property, then state.user \n                                                         //represents specific user and reacheds in the /starred directory\n                .update({\n                    [this.state.channel.id]: {\n                        name: this.state.channel.name,\n                        details: this.state.channel.details,\n                        createBy: {\n                            name: this.state.channel.createdBy.name,\n                            avatar: this.state.channel.createdBy.avatar,\n                        }\n                    }\n                });\n            \n        } else {\n            this.state.usersRef\n                .child(`${this.state.user.uid}/starred`)\n                .child(this.state.channel.id)\n                .remove((err:Error) => {\n                    if(err !== null) {\n                        console.error(err);\n                    }\n                })\n        }\n    }\n    /**\n     * Function that's passed so that MessageHeader can \n     * have an effect in this upper Component Messages.\n     * Changes the search term in Messages and searchLoading:true.\n     */\n    handleSearchChange = (event:InputEvent) => {\n         this.setState({\n             searchTerm: event.currentTarget.value,\n             searchLoading: true,\n         }, () => this.handleSearchMessages());\n    }\n\n    handleSearchMessages = () => {\n        const channelMessages = [...this.state.messages];\n        const regex = new RegExp(this.state.searchTerm, 'gi');\n        const searchResults = channelMessages.reduce((acc, message) => {\n            if(message.content && message.content.match(regex) ||\n               message.user.name.match(regex)\n            ) {\n                acc.push(message);\n            }\n            return acc;\n        }, []);\n        this.setState({ searchResults });\n        setTimeout(() => this.setState({ searchLoading: false}), 1000);\n    }\n\n    //check to see if accumulator includes a specific name from 'messages' to see if its unique\n    countUniqueUsers = (messages:Array<any>) => {\n        const uniqueUsers = messages.reduce((acc,message) => {\n            if(!acc.includes(message.user.name)) {\n                acc.push(message.user.name);\n            }\n            return acc;\n        },[]);\n        const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\n        const numUniqueUsers = `${uniqueUsers.length} user${plural ? \"s\" : \"\"}`;\n        this.setState({numUniqueUsers});\n    }\n\n    // countUsersPosts = (messages:Array<string>) => {\n    //     let userPosts = messages.reduce((acc:any, message:any):any => {\n    //         if(message.user.name in acc) {\n    //             acc[message.user.name].count += 1;\n    //         } else {\n    //             acc[message.user.name] = {\n    //                 avatar: message.user.avatar,\n    //                 count: 1\n    //             }\n    //         }\n    //         return acc;\n    //     }, {});\n       \n    // }\n\n    countUserPosts = (messages: Array<any>) => {\n        let userPosts = messages.reduce((acc, message) => {\n            if(message.user.name in acc) {\n                acc[message.user.name].count += 1;\n            } else {\n                acc[message.user.name] = {\n                    avatar: message.user.avatar,\n                    count: 1\n                }\n            }\n            return acc;\n        }, {});\n        console.log('userPosts -> Messages: ', userPosts);\n        this.props.setUserPosts(userPosts);\n    }\n\n    displayMessages = (messages:Array<any>) => (\n        messages.length > 0 && messages.map((message:{timestamp:number}) => (\n            <Message \n                key={message.timestamp}\n                message={message}\n                user={this.state.user}\n            />\n        ))\n    )\n    \n    // isProgressBarVisible = (percent:number) => {\n    //     if(percent > 0) {\n    //         this.setState({progressBar: true});\n    //     }\n    // }\n    \n    displayChannelName = (channel:{id: number, name: string}) => \n    channel ? `${this.state.privateChannel ? '@' : '#'}${channel.name}` : '';\n    \n    render() {\n        const {messagesRef, messages, channel, user, numUniqueUsers,\n             searchTerm, searchResults, searchLoading, privateChannel, isChannelStarred} = this.state; \n \n        return (\n            <>\n            <MessagesHeader\n                channelName={this.displayChannelName(channel)}\n                numUniqueUsers={numUniqueUsers}\n                handleSearchChange={this.handleSearchChange}\n                searchLoading={searchLoading}\n                isPrivateChannel={privateChannel}\n                handleStar={this.handleStar}\n                isChannelStarred={isChannelStarred}\n            />\n            \n            <Segment> \n                <Comment.Group style={{maxWidth:'98%'}} className={styles.messages}>\n                    {searchTerm ? this.displayMessages(searchResults) :\n                     this.displayMessages(messages)}\n                </Comment.Group>\n            </Segment>\n\n            <MessageForm\n                messagesRef={messagesRef}\n                currentChannel={channel}\n                currentUser={user}\n                isPrivateChannel={privateChannel}\n                getMessagesRef={this.getMessagesRef}\n            />\n            </>\n        )\n    }\n}\nexport default connect<any, any>(null, {setUserPosts})(Messages);\n","import * as actionTypes from './actionTypes';\n\n\nexport const setUserPosts = (userPosts: any) => {\n    return {\n        type: actionTypes.SET_USER_POSTS,\n        payload: {\n            userPosts\n        }\n    }\n}","import React from 'react';\nimport {Grid} from 'semantic-ui-react';\nimport ColorPanel from './colorpanel/ColorPanel'; \nimport SidePanel from './sidepanel/SidePanel';\nimport MetaPanel from './metapanel/MetaPanel'; \nimport Messages from './messages/Messages';\nimport {connect} from 'react-redux';\n\n// Exported Types\nexport type InputEvent = React.FormEvent<HTMLInputElement>;\nexport type FormEvent = React.FormEvent<HTMLFormElement>;\nexport type User = {displayName:string, photoURL:string};\nexport type Notification = {\n  id: number,\n  total: number,\n  lastKnownTotal: number,\n  count: number,\n}\n\nexport interface IChannel {id:number, name:string, details: string};\n\nexport interface INewChannel {\n    id: string,\n    name: string,\n    details: string,\n    createdBy: {\n        name: string,\n        avatar: string\n    }\n}\n\nexport interface Store extends React.Props<any> {\n  store?: any;\n}\n\n// Non Exported types\ninterface Props {\n  currentUser:{displayName:string}\n}\n\nconst App: React.FC = ({currentUser, currentChannel, isPrivateChannel, userPosts}:any) => {\n  \n  return (\n    <Grid columns=\"equal\">\n      <ColorPanel\n        key={currentUser && currentUser.name}\n        currentUser={currentUser} />\n      <SidePanel\n        key={currentUser && currentUser.uid}\n        currentUser={currentUser} />\n\n      <Grid.Column style={{marginLeft: 320}}>\n        <Messages\n          key={currentChannel && currentChannel.id}\n          currentChannel={currentChannel}\n          currentUser={currentUser}\n          isPrivateChannel={isPrivateChannel}\n        />\n      </Grid.Column>\n\n      <Grid.Column width={4}>\n        <MetaPanel\n          key={currentChannel && currentChannel.name}\n          currentChannel={currentChannel}\n          userPosts={userPosts}\n          isPrivateChannel={isPrivateChannel} />      \n      </Grid.Column>\n    </Grid>\n    );\n};\n\nconst mapStateToProps = (state:any):any => ({\n  currentUser: state.user.currentUser,\n  currentChannel: state.channel.currentChannel,\n  isPrivateChannel: state.channel.isPrivateChannel,\n  userPosts: state.user.userPosts,\n}); \n\nexport default connect(mapStateToProps)(App);","import React from \"react\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Button,\n  Header,\n  Message,\n  Icon\n} from \"semantic-ui-react\";\nimport ComponentType from \"../../../ComponentType\";\nimport { Link } from \"react-router-dom\";\nimport firebase from 'firebase';\nimport classes from \"./Login.module.scss\";\n\ntype FormEvent = React.FormEvent<HTMLFormElement>;\ntype InputEvent = React.FormEvent<HTMLInputElement>;\n\ninterface IErrorMessage {\n  message: string;\n}\n\ninterface IForm {\n  email: string;\n  password: string;\n  errors: Array<IErrorMessage>; // IErrorMessage is casted, not required when casted\n  loading: boolean;\n}\n\nclass Login extends ComponentType {\n  // const Register = () => {\n  state: IForm = {\n    email: \"\",\n    password: \"\",\n    errors: [],\n    loading: false\n  };\n  displayErrors = (errors: Array<IErrorMessage>) =>\n    errors.map((error: IErrorMessage, i) => <p key={i}>{error.message}</p>);\n\n  //Typescript uses event.currentTarget instead of event.target along with dot notation '.value'\n  //InputEvent has been declared above with React.FormEvent<....>\n  handleChange = (event: InputEvent) => {\n    this.setState({ [event.currentTarget.name]: event.currentTarget.value });\n  };\n  handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    if (this.isFormValid(this.state)) {\n      this.setState({ errors: [], loading: true });\n    firebase\n        .auth()\n        .signInWithEmailAndPassword(this.state.email, this.state.password)\n        .then(signedInUser => {\n            console.log(signedInUser);\n        })\n        .catch(err => {\n            console.error(err);\n            this.setState({\n                errors: this.state.errors.concat(err),\n                loading: false\n            })\n        })\n    }\n  };\n\n  isFormValid = (credentials:{email:string, password:string}) => credentials.email && credentials.password;\n\n  handleInputError = (errors: Array<IErrorMessage>, inputName: string) =>\n    errors.some(error => error.message.toLowerCase().includes(inputName))\n      ? \"error\"\n      : \"\";\n\n  render() {\n    const { email, password, errors, loading } = this.state;\n    return (\n      <Grid\n        textAlign=\"center\"\n        verticalAlign=\"middle\"\n        className={classes.register}\n        data-test=\"register-component\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h1\" icon color=\"violet\" textAlign=\"center\">\n            \n            <span className={classes.loginHeader}>Login In Here</span>\n          </Header>\n          <form className={classes.formContainer} onSubmit={this.handleSubmit}>\n              <div> \n                <p>DevChat</p>\n              </div>\n\n              <input\n                name=\"email\"\n                placeholder=\"Email Address\"\n                value={email}\n                className={this.handleInputError(errors, \"email\")}\n                onChange={this.handleChange}\n                type=\"email\"\n              />\n\n              <input\n                name=\"password\"\n                placeholder=\"Password\"\n                value={password}\n                className={this.handleInputError(errors, \"password\")}\n                onChange={this.handleChange}\n                type=\"password\"\n              />\n\n              <Button\n                disabled={loading}\n                className={loading ? \"loading\" : \" \"}\n                color=\"violet\"\n                fluid\n                size=\"large\"\n              >\n                Submit\n              </Button>\n            <div className='uiMessage'>\n              Don't have an account? {' '}\n              <Link to=\"/register\"> Register</Link>\n            </div>\n          </form>\n          {errors.length > 0 && (\n            <Message error>\n              <h3>Error</h3>\n              {this.displayErrors(errors)}\n            </Message>\n          )}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\nexport default Login;\n","import React, { FormEventHandler } from \"react\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Button,\n  Header,\n  Message,\n  Icon\n} from \"semantic-ui-react\";\nimport ComponentType from \"../../../ComponentType\";\nimport { Link } from \"react-router-dom\";\nimport classes from \"./Register.module.scss\";\nimport firebase from \"../../../firebase\";\nimport md5 from \"md5\";\n\ntype FormEvent = React.FormEvent<HTMLFormElement>;\ntype InputEvent = React.FormEvent<HTMLInputElement>;\n\ninterface IErrorMessage {\n  message: string;\n}\n\ninterface IForm {\n  username: string;\n  email: string;\n  password: string;\n  passwordConfirmation: string;\n  errors: Array<IErrorMessage>; // IErrorMessage is casted, not required when casted\n  loading: boolean;\n  usersRef: any;\n  // value:string\n}\n\nexport class Register extends ComponentType {\n  // const Register = () => {\n  state: IForm = {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConfirmation: \"\",\n    errors: [],\n    loading: false,\n    usersRef: firebase.database().ref(\"users\")\n    // value: ''\n  };\n  displayErrors = (errors: Array<IErrorMessage>) =>\n    errors.map((error: IErrorMessage, i) => <p key={i}>{error.message}</p>);\n\n  //Typescript uses event.currentTarget instead of event.target along with dot notation '.value'\n  //InputEvent has been declared above with React.FormEvent<....>\n  handleChange = (event: InputEvent) => {\n    this.setState({ [event.currentTarget.name]: event.currentTarget.value });\n  };\n  handleSubmit: FormEventHandler = event => {\n    event.preventDefault();\n    if (this.isFormValid()) {\n      this.setState({ errors: [], loading: true });\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(this.state.email, this.state.password)\n        .then((createdUser: any) => {\n          console.log(createdUser);\n          createdUser.user\n            .updateProfile({\n              displayName: this.state.username,\n              photoURL: `http://gravatar.com/avatar/${md5(\n                createdUser.user.email\n              )}?d=identicon`\n            })\n            .then(() => {\n              this.saveUser(createdUser).then(() => {\n                console.log(\"user saved\");\n              });\n            })\n            .catch((err: Error) => {\n              console.error(err);\n              this.setState({\n                errors: this.state.errors.concat(err),\n                loading: false\n              });\n            });\n        })\n        .catch((err: IErrorMessage) => {\n          console.error(err);\n          this.setState({\n            errors: this.state.errors.concat(err),\n            loading: false\n          });\n        });\n    }\n  };\n\n  saveUser = (createdUser: any) => {\n    return this.state.usersRef.child(createdUser.user.uid).set({\n      name: createdUser.user.displayName,\n      avatar: createdUser.user.photoURL\n    });\n  };\n\n  handleInputError = (errors: Array<IErrorMessage>, inputName: string) =>\n    errors.some(error => error.message.toLowerCase().includes(inputName))\n      ? \"error\"\n      : \"\";\n\n  isFormValid = () => {\n    let errors: Array<IErrorMessage> = this.state.errors;\n    let error;\n    if (this.isFormEmpty(this.state)) {\n      error = { message: \"Fill In All Fields\" };\n      this.setState({ errors: errors.concat(error) });\n      return false;\n    } else if (!this.isPasswordValid(this.state)) {\n      error = { message: \"Password is invalid\" };\n      this.setState({ errors: errors.concat(error) });\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  isFormEmpty = (form: IForm) => {\n    return (\n      !form.username.length ||\n      !form.email.length ||\n      !form.password.length ||\n      !form.passwordConfirmation.length\n    );\n  };\n\n  isPasswordValid = (form: IForm) => {\n    let { password, passwordConfirmation } = form;\n    if (password.length < 6 || passwordConfirmation.length < 6) {\n      return false;\n    } else if (password !== passwordConfirmation) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  render() {\n    const {\n      username,\n      email,\n      password,\n      passwordConfirmation,\n      errors,\n      loading\n    } = this.state;\n    return (\n      <Grid\n        textAlign=\"center\"\n        verticalAlign=\"middle\"\n        className={classes.register}\n        data-test=\"register-component\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h1\" icon color=\"orange\" textAlign=\"center\">\n            <span className={classes.loginHeader}>Register With Us</span>\n          </Header>\n          <form\n            data-test=\"form-component\"\n            onSubmit={this.handleSubmit}\n            className={classes.formContainer}\n          >\n            <div>\n              <p>DevChat</p>\n            </div>\n\n            <input\n              data-test=\"username-input\"\n              name=\"username\"\n              placeholder=\"Username\"\n              value={username}\n              onChange={this.handleChange}\n              type=\"text\"\n            />\n            <input\n              name=\"email\"\n              placeholder=\"Email Address\"\n              value={email}\n              className={this.handleInputError(errors, \"email\")}\n              onChange={this.handleChange}\n              type=\"email\"\n            />\n\n            <input\n              name=\"password\"\n              placeholder=\"Password\"\n              value={password}\n              className={this.handleInputError(errors, \"password\")}\n              onChange={this.handleChange}\n              type=\"password\"\n            />\n\n            <input\n              name=\"passwordConfirmation\"\n              placeholder=\"Password Confirmation\"\n              value={passwordConfirmation}\n              className={this.handleInputError(errors, \"password\")}\n              onChange={this.handleChange}\n              type=\"password\"\n            />\n\n            <Button\n              data-test=\"component-submit-btn\"\n              disabled={loading}\n              className={loading ? \"loading\" : \" \"}\n              color=\"orange\"\n              size=\"large\"\n            >\n              Submit\n            </Button>\n            <div className=\"uiMessage\">\n              Already a user?\n              <Link to=\"/login\"> Login</Link>\n            </div>\n          </form>\n          {errors.length > 0 && (\n            <Message error>\n              <h3>Error</h3>\n              {this.displayErrors(errors)}\n            </Message>\n          )}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\nexport default Register;\n","import React from 'react';\nimport { Loader, Dimmer } from 'semantic-ui-react';\n\nconst Spinner = () => \n    <Dimmer active>\n        <Loader size=\"huge\" content={\"Preparing Chat...\"} />\n    </Dimmer>\n    \nexport default Spinner;","import { combineReducers } from \"redux\";\nimport * as actionTypes from \"../actions/actionTypes\";\n\nconst initialUserState = {\n  currentUser: null,\n  isLoading: true\n};\n\nconst user_reducer = (state = initialUserState, action:any) => {\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        currentUser: action.payload.currentUser,\n        isLoading: false\n      };\n    case actionTypes.CLEAR_USER:\n      return {\n        ...initialUserState,\n        isLoading: false\n      };\n      case actionTypes.SET_USER_POSTS:\n      return {\n        ...state,\n        userPosts: action.payload.userPosts\n      };\n    default:\n      return state;\n  }\n};\nexport default user_reducer;","import * as actionTypes from '../actions/actionTypes';\nimport {IChannel} from '../actions/setCurrentChannel'\n\n\nconst initialChannelState = {\n  currentChannel: '',\n  userPosts: null,\n};\n\nconst channel_reducer = (state = initialChannelState, action:any) => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload.currentChannel\n      }\n    case actionTypes.SET_PRIVATE_CHANNEL:\n      return {\n          ...state,\n          isPrivateChannel: action.payload.isPrivateChannel\n      }\n    default:\n      return state;\n  }\n}\nexport default channel_reducer;\n\n\n\n// import * as actionTypes from '../actions/actionTypes';\n// import {ChannelActions, ChannelState} from '../actions/channelActions';\n// // import {IChannel} from '../actions/setCurrentChannel'\n\n\n// const initialChannelState = {\n//   currentChannel: null\n// };\n\n// const channel_reducer = (state = initialChannelState, action:ChannelActions):ChannelState => {\n//   switch (action.type) {\n//     case actionTypes.SET_CURRENT_CHANNEL:\n//       return {\n//         ...state,\n//         currentChannel: action.payload\n//       }\n//     case actionTypes.SET_PRIVATE_CHANNEL:\n//       return {\n//           ...state,\n//           isPrivateChannel: action.payload.isPrivateChannel\n//       }\n//     default:\n//       return state;\n//   }\n// }\n// export default channel_reducer;","//  export defaults allows for you to rename your imports\nimport { combineReducers } from 'redux';\nimport user_reducer from './user_reducer';\nimport channel_reducer from './channel_reducer';\n\nconst rootReducer = combineReducers({\n    user: user_reducer,\n    channel: channel_reducer\n}); \n\nexport default rootReducer; \n\n\n\n// import { combineReducers } from \"redux\";\n// import * as actionTypes from \"../actions/actionTypes\";\n\n// const initialUserState = {\n//   currentUser: null,\n//   isLoading: true\n// };\n\n// const user_reducer = (state = initialUserState, action:any) => {\n//   switch (action.type) {\n//     case actionTypes.SET_USER:\n//       return {\n//         currentUser: action.payload.currentUser,\n//         isLoading: false\n//       };\n//     case actionTypes.CLEAR_USER:\n//       return {\n//         ...state,\n//         isLoading: false\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// const initialChannelState = {\n//   currentChannel: null\n// };\n\n// const channel_reducer = (state = initialChannelState, action:any) => {\n//   switch (action.type) {\n//     case actionTypes.SET_CURRENT_CHANNEL:\n//       return {\n//         ...state,\n//         currentChannel: action.payload.currentChannel\n//       }\n//     default:\n//       return state;\n//   }\n// }\n\n// const rootReducer = combineReducers({\n//   user: user_reducer,\n//   channel: channel_reducer\n// });\n\n// export default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./components/App\";\nimport ComponentType from './ComponentType';\nimport Login from \"./components/auth/login/Login\";\nimport Register from \"./components/auth/register/Register\";\nimport Spinner from \"./components/ui/spinner/Spinner\";\n\nimport \"semantic-ui-react\";\n\nimport { Provider, connect } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\n\nimport rootReducer from \"./store/reducers\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  withRouter\n} from \"react-router-dom\";\n\n//importing action setupUser\nimport { setUser, clearUser } from \"./store/actions/setUser\";\n\nimport firebase from \"./firebase\";\n\nexport const composeEnhancers =\n  (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n// ENZYME COURSE MIDDLEWARES EDIT to export to testUtil.tsx\nexport const middlewares = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nclass Root extends ComponentType {\n  // Root will be in the connect()()\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.props.setUser(user);\n        this.props.history.push(\"/\");\n      } else {\n        this.props.history.push('/login');\n        this.props.clearUser();\n      }\n    });\n  }\n  render() {\n    return this.props.isLoading ? <Spinner /> : (\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n      </Switch>\n    );\n  }\n}\nconst mapStateToProps = (state:{user:{isLoading:boolean}}) => ({\n  isLoading: state.user.isLoading\n});\n\nconst RootWithAuth = withRouter(\n  connect(\n    mapStateToProps,\n    { setUser, clearUser }\n  )(Root)\n);\n\nif (document.getElementById(\"root\")) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router>\n        <RootWithAuth />\n      </Router>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n}\nexport default Root;\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as actionTypes from './actionTypes';\n\nexport interface ISetUser {\n    type: string,\n    payload: {\n        currentUser:string\n    }\n}\n\nexport const setUser = (user:object) => {\n    return {\n        type: actionTypes.SET_USER,\n        payload: {\n            currentUser: user\n        }\n    }\n}\n\nexport const clearUser = () => {\n    return {\n        type: actionTypes.CLEAR_USER\n    }\n}"],"sourceRoot":""}